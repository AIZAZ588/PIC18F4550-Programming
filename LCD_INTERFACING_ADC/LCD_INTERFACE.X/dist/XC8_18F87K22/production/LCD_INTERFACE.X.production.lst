

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Tue Sep 05 22:11:00 2023

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    32                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    33                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    34  0000                     
    35                           ; Version 2.40
    36                           ; Generated 17/11/2021 GMT
    37                           ; 
    38                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution. Publication is not required when
    52                           ;        this file is used in an embedded application.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC18F4550 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     _PORTD	set	3971
    71  0000                     _PORTBbits	set	3969
    72  0000                     _TRISBbits	set	3987
    73  0000                     _TRISD	set	3989
    74  0000                     _ADRESL	set	4035
    75  0000                     _ADRESH	set	4036
    76  0000                     _ADCON2bits	set	4032
    77  0000                     _ADCON1bits	set	4033
    78  0000                     _ADCON0bits	set	4034
    79  0000                     _TRISAbits	set	3986
    80                           
    81                           	psect	smallconst
    82  000800                     __psmallconst:
    83                           	callstack 0
    84  000800  00                 	db	0
    85  000801                     STR_1:
    86  000801  57                 	db	87	;'W'
    87  000802  45                 	db	69	;'E'
    88  000803  4C                 	db	76	;'L'
    89  000804  43                 	db	67	;'C'
    90  000805  4F                 	db	79	;'O'
    91  000806  4D                 	db	77	;'M'
    92  000807  45                 	db	69	;'E'
    93  000808  30                 	db	48	;'0'
    94  000809  00                 	db	0
    95  00080A                     STR_2:
    96  00080A  20                 	db	32
    97  00080B  25                 	db	37
    98  00080C  64                 	db	100	;'d'
    99  00080D  20                 	db	32
   100  00080E  63                 	db	99	;'c'
   101  00080F  6F                 	db	111	;'o'
   102  000810  64                 	db	100	;'d'
   103  000811  65                 	db	101	;'e'
   104  000812  00                 	db	0
   105  000813  00                 	db	0	; dummy byte at the end
   106  0000                     
   107                           ; #config settings
   108                           
   109                           	psect	cinit
   110  00146C                     __pcinit:
   111                           	callstack 0
   112  00146C                     start_initialization:
   113                           	callstack 0
   114  00146C                     __initialization:
   115                           	callstack 0
   116                           
   117                           ; Clear objects allocated to BANK0 (55 bytes)
   118  00146C  EE00  F060         	lfsr	0,__pbssBANK0
   119  001470  0E37               	movlw	55
   120  001472                     clear_0:
   121  001472  6AEE               	clrf	postinc0,c
   122  001474  06E8               	decf	wreg,f,c
   123  001476  E1FD               	bnz	clear_0
   124  001478                     end_of_initialization:
   125                           	callstack 0
   126  001478                     __end_of__initialization:
   127                           	callstack 0
   128  001478  0E00               	movlw	low (__Lmediumconst shr (0+16))
   129  00147A  6EF8               	movwf	tblptru,c
   130  00147C  0100               	movlb	0
   131  00147E  EF93  F008         	goto	_main	;jump to C main() function
   132                           
   133                           	psect	bssBANK0
   134  000060                     __pbssBANK0:
   135                           	callstack 0
   136  000060                     	ds	15
   137  00006F                     _nout:
   138                           	callstack 0
   139  00006F                     	ds	2
   140  000071                     _width:
   141                           	callstack 0
   142  000071                     	ds	2
   143  000073                     _prec:
   144                           	callstack 0
   145  000073                     	ds	2
   146  000075                     _flags:
   147                           	callstack 0
   148  000075                     	ds	2
   149  000077                     _dbuf:
   150                           	callstack 0
   151  000077                     	ds	32
   152                           
   153                           	psect	cstackBANK0
   154  000097                     __pcstackBANK0:
   155                           	callstack 0
   156  000097                     sprintf@ap:
   157                           	callstack 0
   158                           
   159                           ; 2 bytes @ 0x0
   160  000097                     	ds	2
   161  000099                     sprintf@f:
   162                           	callstack 0
   163                           
   164                           ; 6 bytes @ 0x2
   165  000099                     	ds	6
   166  00009F                     main@buf:
   167                           	callstack 0
   168                           
   169                           ; 15 bytes @ 0x8
   170  00009F                     	ds	15
   171  0000AE                     main@result:
   172                           	callstack 0
   173                           
   174                           ; 2 bytes @ 0x17
   175  0000AE                     	ds	2
   176                           
   177                           	psect	cstackCOMRAM
   178  000001                     __pcstackCOMRAM:
   179                           	callstack 0
   180  000001                     ??_LCD_INST:
   181  000001                     ??_LCD_DATA:
   182  000001                     ?_ADC_READ:
   183                           	callstack 0
   184  000001                     ?_strlen:
   185                           	callstack 0
   186  000001                     ?___aodiv:
   187                           	callstack 0
   188  000001                     ?___aomod:
   189                           	callstack 0
   190  000001                     fputc@c:
   191                           	callstack 0
   192  000001                     strlen@s:
   193                           	callstack 0
   194  000001                     ___aodiv@dividend:
   195                           	callstack 0
   196  000001                     ___aomod@dividend:
   197                           	callstack 0
   198                           
   199                           ; 8 bytes @ 0x0
   200  000001                     	ds	1
   201  000002                     LCD_INST@cmd:
   202                           	callstack 0
   203  000002                     LCD_DATA@data:
   204                           	callstack 0
   205                           
   206                           ; 1 bytes @ 0x1
   207  000002                     	ds	1
   208  000003                     ??_ADC_READ:
   209  000003                     LCD_CURSOR@line:
   210                           	callstack 0
   211  000003                     LCD_TEXT@text:
   212                           	callstack 0
   213  000003                     fputc@fp:
   214                           	callstack 0
   215  000003                     strlen@a:
   216                           	callstack 0
   217                           
   218                           ; 2 bytes @ 0x2
   219  000003                     	ds	1
   220  000004                     LCD_CURSOR@col:
   221                           	callstack 0
   222                           
   223                           ; 1 bytes @ 0x3
   224  000004                     	ds	1
   225  000005                     ??_fputc:
   226  000005                     ADC_READ@result:
   227                           	callstack 0
   228                           
   229                           ; 2 bytes @ 0x4
   230  000005                     	ds	4
   231  000009                     ___aodiv@divisor:
   232                           	callstack 0
   233  000009                     ___aomod@divisor:
   234                           	callstack 0
   235                           
   236                           ; 8 bytes @ 0x8
   237  000009                     	ds	1
   238  00000A                     fputs@s:
   239                           	callstack 0
   240                           
   241                           ; 2 bytes @ 0x9
   242  00000A                     	ds	2
   243  00000C                     fputs@fp:
   244                           	callstack 0
   245                           
   246                           ; 2 bytes @ 0xB
   247  00000C                     	ds	2
   248  00000E                     fputs@c:
   249                           	callstack 0
   250                           
   251                           ; 1 bytes @ 0xD
   252  00000E                     	ds	1
   253  00000F                     fputs@i:
   254                           	callstack 0
   255                           
   256                           ; 2 bytes @ 0xE
   257  00000F                     	ds	2
   258  000011                     ?_pad:
   259                           	callstack 0
   260  000011                     ___aodiv@counter:
   261                           	callstack 0
   262  000011                     ___aomod@counter:
   263                           	callstack 0
   264  000011                     pad@fp:
   265                           	callstack 0
   266                           
   267                           ; 2 bytes @ 0x10
   268  000011                     	ds	1
   269  000012                     ___aodiv@sign:
   270                           	callstack 0
   271  000012                     ___aomod@sign:
   272                           	callstack 0
   273                           
   274                           ; 1 bytes @ 0x11
   275  000012                     	ds	1
   276  000013                     ?_abs:
   277                           	callstack 0
   278  000013                     pad@buf:
   279                           	callstack 0
   280  000013                     abs@a:
   281                           	callstack 0
   282  000013                     ___aodiv@quotient:
   283                           	callstack 0
   284                           
   285                           ; 8 bytes @ 0x12
   286  000013                     	ds	2
   287  000015                     ??_abs:
   288  000015                     pad@p:
   289                           	callstack 0
   290                           
   291                           ; 2 bytes @ 0x14
   292  000015                     	ds	2
   293  000017                     ??_pad:
   294                           
   295                           ; 1 bytes @ 0x16
   296  000017                     	ds	1
   297  000018                     pad@i:
   298                           	callstack 0
   299                           
   300                           ; 2 bytes @ 0x17
   301  000018                     	ds	2
   302  00001A                     pad@w:
   303                           	callstack 0
   304                           
   305                           ; 2 bytes @ 0x19
   306  00001A                     	ds	2
   307  00001C                     ?_dtoa:
   308                           	callstack 0
   309  00001C                     dtoa@fp:
   310                           	callstack 0
   311                           
   312                           ; 2 bytes @ 0x1B
   313  00001C                     	ds	2
   314  00001E                     dtoa@d:
   315                           	callstack 0
   316                           
   317                           ; 8 bytes @ 0x1D
   318  00001E                     	ds	8
   319  000026                     ??_dtoa:
   320                           
   321                           ; 1 bytes @ 0x25
   322  000026                     	ds	8
   323  00002E                     _dtoa$894:
   324                           	callstack 0
   325                           
   326                           ; 2 bytes @ 0x2D
   327  00002E                     	ds	2
   328  000030                     dtoa@p:
   329                           	callstack 0
   330                           
   331                           ; 2 bytes @ 0x2F
   332  000030                     	ds	2
   333  000032                     dtoa@w:
   334                           	callstack 0
   335                           
   336                           ; 2 bytes @ 0x31
   337  000032                     	ds	2
   338  000034                     dtoa@s:
   339                           	callstack 0
   340                           
   341                           ; 2 bytes @ 0x33
   342  000034                     	ds	2
   343  000036                     dtoa@n:
   344                           	callstack 0
   345                           
   346                           ; 8 bytes @ 0x35
   347  000036                     	ds	8
   348  00003E                     dtoa@i:
   349                           	callstack 0
   350                           
   351                           ; 2 bytes @ 0x3D
   352  00003E                     	ds	2
   353  000040                     ?_vfpfcnvrt:
   354                           	callstack 0
   355  000040                     vfpfcnvrt@fp:
   356                           	callstack 0
   357                           
   358                           ; 2 bytes @ 0x3F
   359  000040                     	ds	2
   360  000042                     vfpfcnvrt@fmt:
   361                           	callstack 0
   362                           
   363                           ; 2 bytes @ 0x41
   364  000042                     	ds	2
   365  000044                     vfpfcnvrt@ap:
   366                           	callstack 0
   367                           
   368                           ; 2 bytes @ 0x43
   369  000044                     	ds	2
   370  000046                     ??_vfpfcnvrt:
   371                           
   372                           ; 1 bytes @ 0x45
   373  000046                     	ds	2
   374  000048                     vfpfcnvrt@ll:
   375                           	callstack 0
   376                           
   377                           ; 8 bytes @ 0x47
   378  000048                     	ds	8
   379  000050                     ?_vfprintf:
   380                           	callstack 0
   381  000050                     vfprintf@fp:
   382                           	callstack 0
   383                           
   384                           ; 2 bytes @ 0x4F
   385  000050                     	ds	2
   386  000052                     vfprintf@fmt:
   387                           	callstack 0
   388                           
   389                           ; 2 bytes @ 0x51
   390  000052                     	ds	2
   391  000054                     vfprintf@ap:
   392                           	callstack 0
   393                           
   394                           ; 2 bytes @ 0x53
   395  000054                     	ds	2
   396  000056                     vfprintf@cfmt:
   397                           	callstack 0
   398                           
   399                           ; 2 bytes @ 0x55
   400  000056                     	ds	2
   401  000058                     ?_sprintf:
   402                           	callstack 0
   403  000058                     sprintf@s:
   404                           	callstack 0
   405                           
   406                           ; 2 bytes @ 0x57
   407  000058                     	ds	2
   408  00005A                     sprintf@fmt:
   409                           	callstack 0
   410                           
   411                           ; 2 bytes @ 0x59
   412  00005A                     	ds	4
   413  00005E                     ??_main:
   414                           
   415                           ; 1 bytes @ 0x5D
   416  00005E                     	ds	2
   417                           
   418 ;;
   419 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   420 ;;
   421 ;; *************** function _main *****************
   422 ;; Defined at:
   423 ;;		line 27 in file "main.c"
   424 ;; Parameters:    Size  Location     Type
   425 ;;		None
   426 ;; Auto vars:     Size  Location     Type
   427 ;;  buf            15    8[BANK0 ] unsigned char [15]
   428 ;;  result          2   23[BANK0 ] unsigned short 
   429 ;; Return value:  Size  Location     Type
   430 ;;                  1    wreg      void 
   431 ;; Registers used:
   432 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   433 ;; Tracked objects:
   434 ;;		On entry : 0/0
   435 ;;		On exit  : 0/0
   436 ;;		Unchanged: 0/0
   437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   438 ;;      Params:         0       0       0       0       0       0       0       0       0
   439 ;;      Locals:         0      17       0       0       0       0       0       0       0
   440 ;;      Temps:          2       0       0       0       0       0       0       0       0
   441 ;;      Totals:         2      17       0       0       0       0       0       0       0
   442 ;;Total ram usage:       19 bytes
   443 ;; Hardware stack levels required when called: 8
   444 ;; This function calls:
   445 ;;		_ADC_INT
   446 ;;		_ADC_READ
   447 ;;		_LCD_CURSOR
   448 ;;		_LCD_INT
   449 ;;		_LCD_TEXT
   450 ;;		_sprintf
   451 ;; This function is called by:
   452 ;;		Startup code after reset
   453 ;; This function uses a non-reentrant model
   454 ;;
   455                           
   456                           	psect	text0
   457  001126                     __ptext0:
   458                           	callstack 0
   459  001126                     _main:
   460                           	callstack 23
   461  001126                     
   462                           ;main.c: 29:     char buf[15] = {0};
   463  001126  EE20  F09F         	lfsr	2,main@buf
   464  00112A  0E0E               	movlw	14
   465  00112C                     u1021:
   466  00112C  6ADE               	clrf	postinc2,c
   467  00112E  06E8               	decf	wreg,f,c
   468  001130  E2FD               	bc	u1021
   469  001132                     
   470                           ;main.c: 30:     LCD_INT();
   471  001132  EC28  F00A         	call	_LCD_INT	;wreg free
   472  001136                     
   473                           ;main.c: 31:     ADC_INT();
   474  001136  EC17  F00A         	call	_ADC_INT	;wreg free
   475  00113A                     
   476                           ;main.c: 32:     LCD_TEXT("WELCOME0");
   477  00113A  0E01               	movlw	low STR_1
   478  00113C  6E03               	movwf	LCD_TEXT@text^0,c
   479  00113E  0E08               	movlw	high STR_1
   480  001140  6E04               	movwf	(LCD_TEXT@text+1)^0,c
   481  001142  EC02  F009         	call	_LCD_TEXT	;wreg free
   482  001146                     l1553:
   483                           
   484                           ;main.c: 37:         LCD_CURSOR(4,2);
   485  001146  0E02               	movlw	2
   486  001148  6E03               	movwf	LCD_CURSOR@line^0,c
   487  00114A  0E04               	movlw	4
   488  00114C  EC9C  F009         	call	_LCD_CURSOR
   489  001150                     
   490                           ;main.c: 38:         result = ADC_READ();
   491  001150  ECD4  F009         	call	_ADC_READ	;wreg free
   492  001154  C001  F0AE         	movff	?_ADC_READ,main@result
   493  001158  C002  F0AF         	movff	?_ADC_READ+1,main@result+1
   494                           
   495                           ;main.c: 39:         sprintf(buf," %d code",result);
   496  00115C  0E9F               	movlw	low main@buf
   497  00115E  6E58               	movwf	sprintf@s^0,c
   498  001160  0E00               	movlw	high main@buf
   499  001162  6E59               	movwf	(sprintf@s+1)^0,c
   500  001164  0E0A               	movlw	low STR_2
   501  001166  6E5A               	movwf	sprintf@fmt^0,c
   502  001168  0E08               	movlw	high STR_2
   503  00116A  6E5B               	movwf	(sprintf@fmt+1)^0,c
   504  00116C  C0AE  F05C         	movff	main@result,?_sprintf+4
   505  001170  C0AF  F05D         	movff	main@result+1,?_sprintf+5
   506  001174  EC31  F009         	call	_sprintf	;wreg free
   507  001178                     
   508                           ;main.c: 40:         LCD_TEXT(buf);
   509  001178  0E9F               	movlw	low main@buf
   510  00117A  6E03               	movwf	LCD_TEXT@text^0,c
   511  00117C  0E00               	movlw	high main@buf
   512  00117E  6E04               	movwf	(LCD_TEXT@text+1)^0,c
   513  001180  EC02  F009         	call	_LCD_TEXT	;wreg free
   514  001184                     
   515                           ;main.c: 41:         _delay((unsigned long)((1000)*(8000000/4000.0)));
   516  001184  0E0B               	movlw	11
   517  001186  6E5F               	movwf	(??_main+1)^0,c
   518  001188  0E26               	movlw	38
   519  00118A  6E5E               	movwf	??_main^0,c
   520  00118C  0E5E               	movlw	94
   521  00118E                     u1037:
   522  00118E  2EE8               	decfsz	wreg,f,c
   523  001190  D7FE               	bra	u1037
   524  001192  2E5E               	decfsz	??_main^0,f,c
   525  001194  D7FC               	bra	u1037
   526  001196  2E5F               	decfsz	(??_main+1)^0,f,c
   527  001198  D7FA               	bra	u1037
   528  00119A  EFA3  F008         	goto	l1553
   529  00119E  EF00  F000         	goto	start
   530  0011A2                     __end_of_main:
   531                           	callstack 0
   532                           
   533 ;; *************** function _sprintf *****************
   534 ;; Defined at:
   535 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_sprintf.c"
   536 ;; Parameters:    Size  Location     Type
   537 ;;  s               2   87[COMRAM] PTR unsigned char 
   538 ;;		 -> main@buf(15), 
   539 ;;  fmt             2   89[COMRAM] PTR const unsigned char 
   540 ;;		 -> STR_2(9), 
   541 ;; Auto vars:     Size  Location     Type
   542 ;;  f               6    2[BANK0 ] struct _IO_FILE
   543 ;;  ap              2    0[BANK0 ] PTR void [1]
   544 ;;		 -> ?_sprintf(2), 
   545 ;;  ret             2    0        int 
   546 ;; Return value:  Size  Location     Type
   547 ;;                  2   87[COMRAM] int 
   548 ;; Registers used:
   549 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   550 ;; Tracked objects:
   551 ;;		On entry : 0/0
   552 ;;		On exit  : 0/0
   553 ;;		Unchanged: 0/0
   554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   555 ;;      Params:         6       0       0       0       0       0       0       0       0
   556 ;;      Locals:         0       8       0       0       0       0       0       0       0
   557 ;;      Temps:          0       0       0       0       0       0       0       0       0
   558 ;;      Totals:         6       8       0       0       0       0       0       0       0
   559 ;;Total ram usage:       14 bytes
   560 ;; Hardware stack levels used: 1
   561 ;; Hardware stack levels required when called: 7
   562 ;; This function calls:
   563 ;;		_vfprintf
   564 ;; This function is called by:
   565 ;;		_main
   566 ;; This function uses a non-reentrant model
   567 ;;
   568                           
   569                           	psect	text1
   570  001262                     __ptext1:
   571                           	callstack 0
   572  001262                     _sprintf:
   573                           	callstack 23
   574  001262  0E5C               	movlw	low (?_sprintf+4)
   575  001264  0100               	movlb	0	; () banked
   576  001266  6F97               	movwf	sprintf@ap& (0+255),b
   577  001268  0E00               	movlw	high (?_sprintf+4)
   578  00126A  6F98               	movwf	(sprintf@ap+1)& (0+255),b
   579  00126C  C058  F099         	movff	sprintf@s,sprintf@f
   580  001270  C059  F09A         	movff	sprintf@s+1,sprintf@f+1
   581  001274                     
   582                           ; BSR set to: 0
   583  001274  0E00               	movlw	0
   584  001276  6F9C               	movwf	(sprintf@f+3)& (0+255),b
   585  001278  0E00               	movlw	0
   586  00127A  6F9B               	movwf	(sprintf@f+2)& (0+255),b
   587  00127C                     
   588                           ; BSR set to: 0
   589  00127C  0E00               	movlw	0
   590  00127E  6F9E               	movwf	(sprintf@f+5)& (0+255),b
   591  001280  0E00               	movlw	0
   592  001282  6F9D               	movwf	(sprintf@f+4)& (0+255),b
   593  001284                     
   594                           ; BSR set to: 0
   595  001284  0E99               	movlw	low sprintf@f
   596  001286  6E50               	movwf	vfprintf@fp^0,c
   597  001288  0E00               	movlw	high sprintf@f
   598  00128A  6E51               	movwf	(vfprintf@fp+1)^0,c
   599  00128C  C05A  F052         	movff	sprintf@fmt,vfprintf@fmt
   600  001290  C05B  F053         	movff	sprintf@fmt+1,vfprintf@fmt+1
   601  001294  0E97               	movlw	low sprintf@ap
   602  001296  6E54               	movwf	vfprintf@ap^0,c
   603  001298  0E00               	movlw	high sprintf@ap
   604  00129A  6E55               	movwf	(vfprintf@ap+1)^0,c
   605  00129C  ECD1  F008         	call	_vfprintf	;wreg free
   606  0012A0  0100               	movlb	0	; () banked
   607  0012A2  519B               	movf	(sprintf@f+2)& (0+255),w,b
   608  0012A4  2458               	addwf	sprintf@s^0,w,c
   609  0012A6  6ED9               	movwf	fsr2l,c
   610  0012A8  519C               	movf	(sprintf@f+3)& (0+255),w,b
   611  0012AA  2059               	addwfc	(sprintf@s+1)^0,w,c
   612  0012AC  6EDA               	movwf	fsr2h,c
   613  0012AE  0E00               	movlw	0
   614  0012B0  6EDF               	movwf	indf2,c
   615  0012B2                     
   616                           ; BSR set to: 0
   617  0012B2  0012               	return		;funcret
   618  0012B4                     __end_of_sprintf:
   619                           	callstack 0
   620                           
   621 ;; *************** function _vfprintf *****************
   622 ;; Defined at:
   623 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
   624 ;; Parameters:    Size  Location     Type
   625 ;;  fp              2   79[COMRAM] PTR struct _IO_FILE
   626 ;;		 -> sprintf@f(6), 
   627 ;;  fmt             2   81[COMRAM] PTR const unsigned char 
   628 ;;		 -> STR_2(9), 
   629 ;;  ap              2   83[COMRAM] PTR PTR void 
   630 ;;		 -> sprintf@ap(2), 
   631 ;; Auto vars:     Size  Location     Type
   632 ;;  cfmt            2   85[COMRAM] PTR unsigned char 
   633 ;;		 -> STR_2(9), 
   634 ;; Return value:  Size  Location     Type
   635 ;;                  2   79[COMRAM] int 
   636 ;; Registers used:
   637 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   638 ;; Tracked objects:
   639 ;;		On entry : 0/0
   640 ;;		On exit  : 0/0
   641 ;;		Unchanged: 0/0
   642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   643 ;;      Params:         6       0       0       0       0       0       0       0       0
   644 ;;      Locals:         2       0       0       0       0       0       0       0       0
   645 ;;      Temps:          0       0       0       0       0       0       0       0       0
   646 ;;      Totals:         8       0       0       0       0       0       0       0       0
   647 ;;Total ram usage:        8 bytes
   648 ;; Hardware stack levels used: 1
   649 ;; Hardware stack levels required when called: 6
   650 ;; This function calls:
   651 ;;		_vfpfcnvrt
   652 ;; This function is called by:
   653 ;;		_sprintf
   654 ;; This function uses a non-reentrant model
   655 ;;
   656                           
   657                           	psect	text2
   658  0011A2                     __ptext2:
   659                           	callstack 0
   660  0011A2                     _vfprintf:
   661                           	callstack 23
   662  0011A2                     
   663                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
   664  0011A2  C052  F056         	movff	vfprintf@fmt,vfprintf@cfmt
   665  0011A6  C053  F057         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   666  0011AA                     
   667                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
   668  0011AA  0E00               	movlw	0
   669  0011AC  0100               	movlb	0	; () banked
   670  0011AE  6F70               	movwf	(_nout+1)& (0+255),b
   671  0011B0  0E00               	movlw	0
   672  0011B2  6F6F               	movwf	_nout& (0+255),b
   673                           
   674                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
   675  0011B4  EFEF  F008         	goto	l1485
   676  0011B8                     l1483:
   677                           
   678                           ; BSR set to: 0
   679                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
   680  0011B8  C050  F040         	movff	vfprintf@fp,vfpfcnvrt@fp
   681  0011BC  C051  F041         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   682  0011C0  0E56               	movlw	low vfprintf@cfmt
   683  0011C2  6E42               	movwf	vfpfcnvrt@fmt^0,c
   684  0011C4  0E00               	movlw	high vfprintf@cfmt
   685  0011C6  6E43               	movwf	(vfpfcnvrt@fmt+1)^0,c
   686  0011C8  C054  F044         	movff	vfprintf@ap,vfpfcnvrt@ap
   687  0011CC  C055  F045         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   688  0011D0  EC7B  F005         	call	_vfpfcnvrt	;wreg free
   689  0011D4  5040               	movf	?_vfpfcnvrt^0,w,c
   690  0011D6  0100               	movlb	0	; () banked
   691  0011D8  276F               	addwf	_nout& (0+255),f,b
   692  0011DA  5041               	movf	(?_vfpfcnvrt+1)^0,w,c
   693  0011DC  2370               	addwfc	(_nout+1)& (0+255),f,b
   694  0011DE                     l1485:
   695                           
   696                           ; BSR set to: 0
   697                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
   698  0011DE  C056  FFF6         	movff	vfprintf@cfmt,tblptrl
   699  0011E2  C057  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   700  0011E6                     	if	0	;tblptru may be non-zero
   701  0011E6                     	endif
   702  0011E6                     	if	0	;tblptru may be non-zero
   703  0011E6                     	endif
   704  0011E6  0008               	tblrd		*
   705  0011E8  50F5               	movf	tablat,w,c
   706  0011EA  0900               	iorlw	0
   707  0011EC  A4D8               	btfss	status,2,c
   708  0011EE  EFFB  F008         	goto	u951
   709  0011F2  EFFD  F008         	goto	u950
   710  0011F6                     u951:
   711  0011F6  EFDC  F008         	goto	l1483
   712  0011FA                     u950:
   713  0011FA                     
   714                           ; BSR set to: 0
   715                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
   716  0011FA  C06F  F050         	movff	_nout,?_vfprintf
   717  0011FE  C070  F051         	movff	_nout+1,?_vfprintf+1
   718  001202                     
   719                           ; BSR set to: 0
   720  001202  0012               	return		;funcret
   721  001204                     __end_of_vfprintf:
   722                           	callstack 0
   723                           
   724 ;; *************** function _vfpfcnvrt *****************
   725 ;; Defined at:
   726 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
   727 ;; Parameters:    Size  Location     Type
   728 ;;  fp              2   63[COMRAM] PTR struct _IO_FILE
   729 ;;		 -> sprintf@f(6), 
   730 ;;  fmt             2   65[COMRAM] PTR PTR unsigned char 
   731 ;;		 -> vfprintf@cfmt(2), 
   732 ;;  ap              2   67[COMRAM] PTR PTR void 
   733 ;;		 -> sprintf@ap(2), 
   734 ;; Auto vars:     Size  Location     Type
   735 ;;  ll              8   71[COMRAM] long long 
   736 ;;  llu             8    0        unsigned long long 
   737 ;;  f               4    0        unsigned long long 
   738 ;;  vp              3    0        PTR void 
   739 ;;  ct              3    0        unsigned char [3]
   740 ;;  cp              3    0        PTR unsigned char 
   741 ;;  i               2    0        int 
   742 ;;  done            2    0        int 
   743 ;;  c               1    0        unsigned char 
   744 ;; Return value:  Size  Location     Type
   745 ;;                  2   63[COMRAM] int 
   746 ;; Registers used:
   747 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   748 ;; Tracked objects:
   749 ;;		On entry : 0/0
   750 ;;		On exit  : 0/0
   751 ;;		Unchanged: 0/0
   752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   753 ;;      Params:         6       0       0       0       0       0       0       0       0
   754 ;;      Locals:         8       0       0       0       0       0       0       0       0
   755 ;;      Temps:          2       0       0       0       0       0       0       0       0
   756 ;;      Totals:        16       0       0       0       0       0       0       0       0
   757 ;;Total ram usage:       16 bytes
   758 ;; Hardware stack levels used: 1
   759 ;; Hardware stack levels required when called: 5
   760 ;; This function calls:
   761 ;;		_dtoa
   762 ;;		_fputc
   763 ;; This function is called by:
   764 ;;		_vfprintf
   765 ;; This function uses a non-reentrant model
   766 ;;
   767                           
   768                           	psect	text3
   769  000AF6                     __ptext3:
   770                           	callstack 0
   771  000AF6                     _vfpfcnvrt:
   772                           	callstack 23
   773  000AF6                     
   774                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.32\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          2\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
   775  000AF6  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   776  000AFA  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   777  000AFE  CFDE FFF6          	movff	postinc2,tblptrl
   778  000B02  CFDD FFF7          	movff	postdec2,tblptrh
   779  000B06                     	if	0	;tblptru may be non-zero
   780  000B06                     	endif
   781  000B06                     	if	0	;tblptru may be non-zero
   782  000B06                     	endif
   783  000B06  0008               	tblrd		*
   784  000B08  50F5               	movf	tablat,w,c
   785  000B0A  0A25               	xorlw	37
   786  000B0C  A4D8               	btfss	status,2,c
   787  000B0E  EF8B  F005         	goto	u911
   788  000B12  EF8D  F005         	goto	u910
   789  000B16                     u911:
   790  000B16  EF39  F006         	goto	l1449
   791  000B1A                     u910:
   792  000B1A                     
   793                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
   794  000B1A  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   795  000B1E  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   796  000B22  2ADE               	incf	postinc2,f,c
   797  000B24  0E00               	movlw	0
   798  000B26  22DD               	addwfc	postdec2,f,c
   799  000B28                     
   800                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
   801  000B28  0E00               	movlw	0
   802  000B2A  0100               	movlb	0	; () banked
   803  000B2C  6F72               	movwf	(_width+1)& (0+255),b
   804  000B2E  0E00               	movlw	0
   805  000B30  6F71               	movwf	_width& (0+255),b
   806  000B32  C071  F075         	movff	_width,_flags
   807  000B36  C072  F076         	movff	_width+1,_flags+1
   808  000B3A                     
   809                           ; BSR set to: 0
   810                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
   811  000B3A  6973               	setf	_prec& (0+255),b
   812  000B3C  6974               	setf	(_prec+1)& (0+255),b
   813  000B3E                     
   814                           ; BSR set to: 0
   815                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 847:         if (
      +                          (*fmt[0] == 'd') || (*fmt[0] == 'i')) {
   816  000B3E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   817  000B42  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   818  000B46  CFDE FFF6          	movff	postinc2,tblptrl
   819  000B4A  CFDD FFF7          	movff	postdec2,tblptrh
   820  000B4E                     	if	0	;tblptru may be non-zero
   821  000B4E                     	endif
   822  000B4E                     	if	0	;tblptru may be non-zero
   823  000B4E                     	endif
   824  000B4E  0008               	tblrd		*
   825  000B50  50F5               	movf	tablat,w,c
   826  000B52  0A64               	xorlw	100
   827  000B54  B4D8               	btfsc	status,2,c
   828  000B56  EFAF  F005         	goto	u921
   829  000B5A  EFB1  F005         	goto	u920
   830  000B5E                     u921:
   831  000B5E  EFC3  F005         	goto	l1427
   832  000B62                     u920:
   833  000B62                     
   834                           ; BSR set to: 0
   835  000B62  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   836  000B66  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   837  000B6A  CFDE FFF6          	movff	postinc2,tblptrl
   838  000B6E  CFDD FFF7          	movff	postdec2,tblptrh
   839  000B72                     	if	0	;tblptru may be non-zero
   840  000B72                     	endif
   841  000B72                     	if	0	;tblptru may be non-zero
   842  000B72                     	endif
   843  000B72  0008               	tblrd		*
   844  000B74  50F5               	movf	tablat,w,c
   845  000B76  0A69               	xorlw	105
   846  000B78  A4D8               	btfss	status,2,c
   847  000B7A  EFC1  F005         	goto	u931
   848  000B7E  EFC3  F005         	goto	u930
   849  000B82                     u931:
   850  000B82  EF03  F006         	goto	l1433
   851  000B86                     u930:
   852  000B86                     l1427:
   853                           
   854                           ; BSR set to: 0
   855                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 849:             
      +                          ++*fmt;
   856  000B86  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   857  000B8A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   858  000B8E  2ADE               	incf	postinc2,f,c
   859  000B90  0E00               	movlw	0
   860  000B92  22DD               	addwfc	postdec2,f,c
   861                           
   862                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 850:             
      +                          ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
   863  000B94  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
   864  000B98  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
   865  000B9C  CFDF F046          	movff	indf2,??_vfpfcnvrt
   866  000BA0  0E02               	movlw	2
   867  000BA2  26DE               	addwf	postinc2,f,c
   868  000BA4  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
   869  000BA8  0E00               	movlw	0
   870  000BAA  22DD               	addwfc	postdec2,f,c
   871  000BAC  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
   872  000BB0  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
   873  000BB4  CFDE F048          	movff	postinc2,vfpfcnvrt@ll
   874  000BB8  CFDD F049          	movff	postdec2,vfpfcnvrt@ll+1
   875  000BBC  0E00               	movlw	0
   876  000BBE  BE49               	btfsc	(vfpfcnvrt@ll+1)^0,7,c
   877  000BC0  0EFF               	movlw	-1
   878  000BC2  6E4A               	movwf	(vfpfcnvrt@ll+2)^0,c
   879  000BC4  6E4B               	movwf	(vfpfcnvrt@ll+3)^0,c
   880  000BC6  6E4C               	movwf	(vfpfcnvrt@ll+4)^0,c
   881  000BC8  6E4D               	movwf	(vfpfcnvrt@ll+5)^0,c
   882  000BCA  6E4E               	movwf	(vfpfcnvrt@ll+6)^0,c
   883  000BCC  6E4F               	movwf	(vfpfcnvrt@ll+7)^0,c
   884  000BCE                     
   885                           ; BSR set to: 0
   886                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 852:             
      +                          return dtoa(fp, ll);
   887  000BCE  C040  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
   888  000BD2  C041  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
   889  000BD6  C048  F01E         	movff	vfpfcnvrt@ll,dtoa@d
   890  000BDA  C049  F01F         	movff	vfpfcnvrt@ll+1,dtoa@d+1
   891  000BDE  C04A  F020         	movff	vfpfcnvrt@ll+2,dtoa@d+2
   892  000BE2  C04B  F021         	movff	vfpfcnvrt@ll+3,dtoa@d+3
   893  000BE6  C04C  F022         	movff	vfpfcnvrt@ll+4,dtoa@d+4
   894  000BEA  C04D  F023         	movff	vfpfcnvrt@ll+5,dtoa@d+5
   895  000BEE  C04E  F024         	movff	vfpfcnvrt@ll+6,dtoa@d+6
   896  000BF2  C04F  F025         	movff	vfpfcnvrt@ll+7,dtoa@d+7
   897  000BF6  EC0A  F004         	call	_dtoa	;wreg free
   898  000BFA  C01C  F040         	movff	?_dtoa,?_vfpfcnvrt
   899  000BFE  C01D  F041         	movff	?_dtoa+1,?_vfpfcnvrt+1
   900  000C02  EF54  F006         	goto	l824
   901  000C06                     l1433:
   902                           
   903                           ; BSR set to: 0
   904                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
   905  000C06  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   906  000C0A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   907  000C0E  CFDE FFF6          	movff	postinc2,tblptrl
   908  000C12  CFDD FFF7          	movff	postdec2,tblptrh
   909  000C16                     	if	0	;tblptru may be non-zero
   910  000C16                     	endif
   911  000C16                     	if	0	;tblptru may be non-zero
   912  000C16                     	endif
   913  000C16  0008               	tblrd		*
   914  000C18  50F5               	movf	tablat,w,c
   915  000C1A  0A25               	xorlw	37
   916  000C1C  A4D8               	btfss	status,2,c
   917  000C1E  EF13  F006         	goto	u941
   918  000C22  EF15  F006         	goto	u940
   919  000C26                     u941:
   920  000C26  EF2C  F006         	goto	l1443
   921  000C2A                     u940:
   922  000C2A                     
   923                           ; BSR set to: 0
   924                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
   925  000C2A  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   926  000C2E  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   927  000C32  2ADE               	incf	postinc2,f,c
   928  000C34  0E00               	movlw	0
   929  000C36  22DD               	addwfc	postdec2,f,c
   930  000C38                     
   931                           ; BSR set to: 0
   932                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
   933  000C38  0E00               	movlw	0
   934  000C3A  6E02               	movwf	(fputc@c+1)^0,c
   935  000C3C  0E25               	movlw	37
   936  000C3E  6E01               	movwf	fputc@c^0,c
   937  000C40  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
   938  000C44  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
   939  000C48  ECCB  F007         	call	_fputc	;wreg free
   940  000C4C                     l1439:
   941                           
   942                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
   943  000C4C  0E00               	movlw	0
   944  000C4E  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
   945  000C50  0E01               	movlw	1
   946  000C52  6E40               	movwf	?_vfpfcnvrt^0,c
   947  000C54  EF54  F006         	goto	l824
   948  000C58                     l1443:
   949                           
   950                           ; BSR set to: 0
   951                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
   952  000C58  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   953  000C5C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   954  000C60  2ADE               	incf	postinc2,f,c
   955  000C62  0E00               	movlw	0
   956  000C64  22DD               	addwfc	postdec2,f,c
   957  000C66                     
   958                           ; BSR set to: 0
   959                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
   960  000C66  0E00               	movlw	0
   961  000C68  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
   962  000C6A  0E00               	movlw	0
   963  000C6C  6E40               	movwf	?_vfpfcnvrt^0,c
   964  000C6E  EF54  F006         	goto	l824
   965  000C72                     l1449:
   966                           
   967                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
   968  000C72  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   969  000C76  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   970  000C7A  CFDE FFF6          	movff	postinc2,tblptrl
   971  000C7E  CFDD FFF7          	movff	postdec2,tblptrh
   972  000C82                     	if	0	;tblptru may be non-zero
   973  000C82                     	endif
   974  000C82                     	if	0	;tblptru may be non-zero
   975  000C82                     	endif
   976  000C82  0008               	tblrd		*
   977  000C84  50F5               	movf	tablat,w,c
   978  000C86  6E01               	movwf	fputc@c^0,c
   979  000C88  6A02               	clrf	(fputc@c+1)^0,c
   980  000C8A  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
   981  000C8E  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
   982  000C92  ECCB  F007         	call	_fputc	;wreg free
   983  000C96                     
   984                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
   985  000C96  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   986  000C9A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   987  000C9E  2ADE               	incf	postinc2,f,c
   988  000CA0  0E00               	movlw	0
   989  000CA2  22DD               	addwfc	postdec2,f,c
   990  000CA4  EF26  F006         	goto	l1439
   991  000CA8                     l824:
   992  000CA8  0012               	return		;funcret
   993  000CAA                     __end_of_vfpfcnvrt:
   994                           	callstack 0
   995                           
   996 ;; *************** function _dtoa *****************
   997 ;; Defined at:
   998 ;;		line 287 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
   999 ;; Parameters:    Size  Location     Type
  1000 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1001 ;;		 -> sprintf@f(6), 
  1002 ;;  d               8   29[COMRAM] long long 
  1003 ;; Auto vars:     Size  Location     Type
  1004 ;;  n               8   53[COMRAM] long long 
  1005 ;;  i               2   61[COMRAM] int 
  1006 ;;  s               2   51[COMRAM] int 
  1007 ;;  w               2   49[COMRAM] int 
  1008 ;;  p               2   47[COMRAM] int 
  1009 ;; Return value:  Size  Location     Type
  1010 ;;                  2   27[COMRAM] int 
  1011 ;; Registers used:
  1012 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1013 ;; Tracked objects:
  1014 ;;		On entry : 0/0
  1015 ;;		On exit  : 0/0
  1016 ;;		Unchanged: 0/0
  1017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1018 ;;      Params:        10       0       0       0       0       0       0       0       0
  1019 ;;      Locals:        18       0       0       0       0       0       0       0       0
  1020 ;;      Temps:          8       0       0       0       0       0       0       0       0
  1021 ;;      Totals:        36       0       0       0       0       0       0       0       0
  1022 ;;Total ram usage:       36 bytes
  1023 ;; Hardware stack levels used: 1
  1024 ;; Hardware stack levels required when called: 4
  1025 ;; This function calls:
  1026 ;;		___aodiv
  1027 ;;		___aomod
  1028 ;;		_abs
  1029 ;;		_pad
  1030 ;; This function is called by:
  1031 ;;		_vfpfcnvrt
  1032 ;; This function uses a non-reentrant model
  1033 ;;
  1034                           
  1035                           	psect	text4
  1036  000814                     __ptext4:
  1037                           	callstack 0
  1038  000814                     _dtoa:
  1039                           	callstack 23
  1040  000814                     
  1041                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 287: static int d
      +                          toa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\d
      +                          oprnt.c: 288: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 28
      +                          9:     int i, p, s, w;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprn
      +                          t.c: 290:     long long n;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\d
      +                          oprnt.c: 293:     n = d;
  1042  000814  C01E  F036         	movff	dtoa@d,dtoa@n
  1043  000818  C01F  F037         	movff	dtoa@d+1,dtoa@n+1
  1044  00081C  C020  F038         	movff	dtoa@d+2,dtoa@n+2
  1045  000820  C021  F039         	movff	dtoa@d+3,dtoa@n+3
  1046  000824  C022  F03A         	movff	dtoa@d+4,dtoa@n+4
  1047  000828  C023  F03B         	movff	dtoa@d+5,dtoa@n+5
  1048  00082C  C024  F03C         	movff	dtoa@d+6,dtoa@n+6
  1049  000830  C025  F03D         	movff	dtoa@d+7,dtoa@n+7
  1050  000834                     
  1051                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 294:     s = n < 
      +                          0 ? 1 : 0;
  1052  000834  BE3D               	btfsc	(dtoa@n+7)^0,7,c
  1053  000836  EF1F  F004         	goto	u761
  1054  00083A  EF22  F004         	goto	u760
  1055  00083E                     u761:
  1056  00083E  0E01               	movlw	1
  1057  000840  EF23  F004         	goto	u770
  1058  000844                     u760:
  1059  000844  0E00               	movlw	0
  1060  000846                     u770:
  1061  000846  6E34               	movwf	dtoa@s^0,c
  1062  000848  6A35               	clrf	(dtoa@s+1)^0,c
  1063                           
  1064                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 295:     if (s) {
  1065  00084A  5034               	movf	dtoa@s^0,w,c
  1066  00084C  1035               	iorwf	(dtoa@s+1)^0,w,c
  1067  00084E  B4D8               	btfsc	status,2,c
  1068  000850  EF2C  F004         	goto	u781
  1069  000854  EF2E  F004         	goto	u780
  1070  000858                     u781:
  1071  000858  EF3E  F004         	goto	l1359
  1072  00085C                     u780:
  1073  00085C                     
  1074                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 296:         n = 
      +                          -n;
  1075  00085C  1E3D               	comf	(dtoa@n+7)^0,f,c
  1076  00085E  1E3C               	comf	(dtoa@n+6)^0,f,c
  1077  000860  1E3B               	comf	(dtoa@n+5)^0,f,c
  1078  000862  1E3A               	comf	(dtoa@n+4)^0,f,c
  1079  000864  1E39               	comf	(dtoa@n+3)^0,f,c
  1080  000866  1E38               	comf	(dtoa@n+2)^0,f,c
  1081  000868  1E37               	comf	(dtoa@n+1)^0,f,c
  1082  00086A  6C36               	negf	dtoa@n^0,c
  1083  00086C  0E00               	movlw	0
  1084  00086E  2237               	addwfc	(dtoa@n+1)^0,f,c
  1085  000870  2238               	addwfc	(dtoa@n+2)^0,f,c
  1086  000872  2239               	addwfc	(dtoa@n+3)^0,f,c
  1087  000874  223A               	addwfc	(dtoa@n+4)^0,f,c
  1088  000876  223B               	addwfc	(dtoa@n+5)^0,f,c
  1089  000878  223C               	addwfc	(dtoa@n+6)^0,f,c
  1090  00087A  223D               	addwfc	(dtoa@n+7)^0,f,c
  1091  00087C                     l1359:
  1092                           
  1093                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 300:     if (!(pr
      +                          ec < 0)) {
  1094  00087C  0100               	movlb	0	; () banked
  1095  00087E  BF74               	btfsc	(_prec+1)& (0+255),7,b
  1096  000880  EF44  F004         	goto	u791
  1097  000884  EF46  F004         	goto	u790
  1098  000888                     u791:
  1099  000888  EF47  F004         	goto	l1363
  1100  00088C                     u790:
  1101  00088C                     
  1102                           ; BSR set to: 0
  1103                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 301:         flag
      +                          s &= ~(1 << 1);
  1104  00088C  9375               	bcf	_flags& (0+255),1,b
  1105  00088E                     l1363:
  1106                           
  1107                           ; BSR set to: 0
  1108                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 303:     p = (0 <
      +                           prec) ? prec : 1;
  1109  00088E  BF74               	btfsc	(_prec+1)& (0+255),7,b
  1110  000890  EF54  F004         	goto	u800
  1111  000894  5174               	movf	(_prec+1)& (0+255),w,b
  1112  000896  E106               	bnz	u801
  1113  000898  0573               	decf	_prec& (0+255),w,b
  1114  00089A  B0D8               	btfsc	status,0,c
  1115  00089C  EF52  F004         	goto	u801
  1116  0008A0  EF54  F004         	goto	u800
  1117  0008A4                     u801:
  1118  0008A4  EF5A  F004         	goto	l797
  1119  0008A8                     u800:
  1120  0008A8                     
  1121                           ; BSR set to: 0
  1122  0008A8  0E00               	movlw	0
  1123  0008AA  6E31               	movwf	(dtoa@p+1)^0,c
  1124  0008AC  0E01               	movlw	1
  1125  0008AE  6E30               	movwf	dtoa@p^0,c
  1126  0008B0  EF5E  F004         	goto	l799
  1127  0008B4                     l797:
  1128                           
  1129                           ; BSR set to: 0
  1130  0008B4  C073  F030         	movff	_prec,dtoa@p
  1131  0008B8  C074  F031         	movff	_prec+1,dtoa@p+1
  1132  0008BC                     l799:
  1133                           
  1134                           ; BSR set to: 0
  1135                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 304:     w = widt
      +                          h;
  1136  0008BC  C071  F032         	movff	_width,dtoa@w
  1137  0008C0  C072  F033         	movff	_width+1,dtoa@w+1
  1138  0008C4                     
  1139                           ; BSR set to: 0
  1140                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 305:     if (s ||
      +                           (flags & (1 << 2))) {
  1141  0008C4  5034               	movf	dtoa@s^0,w,c
  1142  0008C6  1035               	iorwf	(dtoa@s+1)^0,w,c
  1143  0008C8  A4D8               	btfss	status,2,c
  1144  0008CA  EF69  F004         	goto	u811
  1145  0008CE  EF6B  F004         	goto	u810
  1146  0008D2                     u811:
  1147  0008D2  EF72  F004         	goto	l1371
  1148  0008D6                     u810:
  1149  0008D6                     
  1150                           ; BSR set to: 0
  1151  0008D6  A575               	btfss	_flags& (0+255),2,b
  1152  0008D8  EF70  F004         	goto	u821
  1153  0008DC  EF72  F004         	goto	u820
  1154  0008E0                     u821:
  1155  0008E0  EF75  F004         	goto	l1373
  1156  0008E4                     u820:
  1157  0008E4                     l1371:
  1158                           
  1159                           ; BSR set to: 0
  1160                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 306:         --w;
  1161  0008E4  0632               	decf	dtoa@w^0,f,c
  1162  0008E6  A0D8               	btfss	status,0,c
  1163  0008E8  0633               	decf	(dtoa@w+1)^0,f,c
  1164  0008EA                     l1373:
  1165                           
  1166                           ; BSR set to: 0
  1167                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 310:     i = size
      +                          of(dbuf) - 1;
  1168  0008EA  0E00               	movlw	0
  1169  0008EC  6E3F               	movwf	(dtoa@i+1)^0,c
  1170  0008EE  0E1F               	movlw	31
  1171  0008F0  6E3E               	movwf	dtoa@i^0,c
  1172  0008F2                     
  1173                           ; BSR set to: 0
  1174                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 311:     dbuf[i] 
      +                          = '\0';
  1175  0008F2  0E00               	movlw	0
  1176  0008F4  6F96               	movwf	(_dbuf+31)& (0+255),b
  1177                           
  1178                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1179  0008F6  EFF9  F004         	goto	l1387
  1180  0008FA                     l1377:
  1181                           
  1182                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 313:         --i;
  1183  0008FA  063E               	decf	dtoa@i^0,f,c
  1184  0008FC  A0D8               	btfss	status,0,c
  1185  0008FE  063F               	decf	(dtoa@i+1)^0,f,c
  1186  000900                     
  1187                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 314:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  1188  000900  0E77               	movlw	low _dbuf
  1189  000902  243E               	addwf	dtoa@i^0,w,c
  1190  000904  6ED9               	movwf	fsr2l,c
  1191  000906  0E00               	movlw	high _dbuf
  1192  000908  203F               	addwfc	(dtoa@i+1)^0,w,c
  1193  00090A  6EDA               	movwf	fsr2h,c
  1194  00090C  C036  F001         	movff	dtoa@n,___aomod@dividend
  1195  000910  C037  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1196  000914  C038  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1197  000918  C039  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1198  00091C  C03A  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1199  000920  C03B  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1200  000924  C03C  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1201  000928  C03D  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1202  00092C  0E0A               	movlw	10
  1203  00092E  6E09               	movwf	___aomod@divisor^0,c
  1204  000930  0E00               	movlw	0
  1205  000932  6E0A               	movwf	(___aomod@divisor+1)^0,c
  1206  000934  0E00               	movlw	0
  1207  000936  6E0B               	movwf	(___aomod@divisor+2)^0,c
  1208  000938  0E00               	movlw	0
  1209  00093A  6E0C               	movwf	(___aomod@divisor+3)^0,c
  1210  00093C  0E00               	movlw	0
  1211  00093E  6E0D               	movwf	(___aomod@divisor+4)^0,c
  1212  000940  0E00               	movlw	0
  1213  000942  6E0E               	movwf	(___aomod@divisor+5)^0,c
  1214  000944  0E00               	movlw	0
  1215  000946  6E0F               	movwf	(___aomod@divisor+6)^0,c
  1216  000948  0E00               	movlw	0
  1217  00094A  6E10               	movwf	(___aomod@divisor+7)^0,c
  1218  00094C  EC19  F007         	call	___aomod	;wreg free
  1219  000950  C001  F026         	movff	?___aomod,??_dtoa
  1220  000954  C002  F027         	movff	?___aomod+1,??_dtoa+1
  1221  000958  C003  F028         	movff	?___aomod+2,??_dtoa+2
  1222  00095C  C004  F029         	movff	?___aomod+3,??_dtoa+3
  1223  000960  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  1224  000964  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  1225  000968  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  1226  00096C  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  1227  000970  C026  F013         	movff	??_dtoa,abs@a
  1228  000974  C028  F014         	movff	??_dtoa+2,abs@a+1
  1229  000978  EC7C  F009         	call	_abs	;wreg free
  1230  00097C  5013               	movf	?_abs^0,w,c
  1231  00097E  0F30               	addlw	48
  1232  000980  6EDF               	movwf	indf2,c
  1233  000982                     
  1234                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 315:         --p;
  1235  000982  0630               	decf	dtoa@p^0,f,c
  1236  000984  A0D8               	btfss	status,0,c
  1237  000986  0631               	decf	(dtoa@p+1)^0,f,c
  1238  000988                     
  1239                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 316:         --w;
  1240  000988  0632               	decf	dtoa@w^0,f,c
  1241  00098A  A0D8               	btfss	status,0,c
  1242  00098C  0633               	decf	(dtoa@w+1)^0,f,c
  1243  00098E                     
  1244                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 317:         n = 
      +                          n / 10;
  1245  00098E  C036  F001         	movff	dtoa@n,___aodiv@dividend
  1246  000992  C037  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1247  000996  C038  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1248  00099A  C039  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1249  00099E  C03A  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1250  0009A2  C03B  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1251  0009A6  C03C  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1252  0009AA  C03D  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1253  0009AE  0E0A               	movlw	10
  1254  0009B0  6E09               	movwf	___aodiv@divisor^0,c
  1255  0009B2  0E00               	movlw	0
  1256  0009B4  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  1257  0009B6  0E00               	movlw	0
  1258  0009B8  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  1259  0009BA  0E00               	movlw	0
  1260  0009BC  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  1261  0009BE  0E00               	movlw	0
  1262  0009C0  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  1263  0009C2  0E00               	movlw	0
  1264  0009C4  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  1265  0009C6  0E00               	movlw	0
  1266  0009C8  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  1267  0009CA  0E00               	movlw	0
  1268  0009CC  6E10               	movwf	(___aodiv@divisor+7)^0,c
  1269  0009CE  EC55  F006         	call	___aodiv	;wreg free
  1270  0009D2  C001  F036         	movff	?___aodiv,dtoa@n
  1271  0009D6  C002  F037         	movff	?___aodiv+1,dtoa@n+1
  1272  0009DA  C003  F038         	movff	?___aodiv+2,dtoa@n+2
  1273  0009DE  C004  F039         	movff	?___aodiv+3,dtoa@n+3
  1274  0009E2  C005  F03A         	movff	?___aodiv+4,dtoa@n+4
  1275  0009E6  C006  F03B         	movff	?___aodiv+5,dtoa@n+5
  1276  0009EA  C007  F03C         	movff	?___aodiv+6,dtoa@n+6
  1277  0009EE  C008  F03D         	movff	?___aodiv+7,dtoa@n+7
  1278  0009F2                     l1387:
  1279                           
  1280                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1281  0009F2  BE3F               	btfsc	(dtoa@i+1)^0,7,c
  1282  0009F4  EF04  F005         	goto	u831
  1283  0009F8  503F               	movf	(dtoa@i+1)^0,w,c
  1284  0009FA  E108               	bnz	u830
  1285  0009FC  043E               	decf	dtoa@i^0,w,c
  1286  0009FE  A0D8               	btfss	status,0,c
  1287  000A00  EF04  F005         	goto	u831
  1288  000A04  EF06  F005         	goto	u830
  1289  000A08                     u831:
  1290  000A08  EF37  F005         	goto	l1397
  1291  000A0C                     u830:
  1292  000A0C  5036               	movf	dtoa@n^0,w,c
  1293  000A0E  1037               	iorwf	(dtoa@n+1)^0,w,c
  1294  000A10  1038               	iorwf	(dtoa@n+2)^0,w,c
  1295  000A12  1039               	iorwf	(dtoa@n+3)^0,w,c
  1296  000A14  103A               	iorwf	(dtoa@n+4)^0,w,c
  1297  000A16  103B               	iorwf	(dtoa@n+5)^0,w,c
  1298  000A18  103C               	iorwf	(dtoa@n+6)^0,w,c
  1299  000A1A  103D               	iorwf	(dtoa@n+7)^0,w,c
  1300  000A1C  A4D8               	btfss	status,2,c
  1301  000A1E  EF13  F005         	goto	u841
  1302  000A22  EF15  F005         	goto	u840
  1303  000A26                     u841:
  1304  000A26  EF7D  F004         	goto	l1377
  1305  000A2A                     u840:
  1306  000A2A  BE31               	btfsc	(dtoa@p+1)^0,7,c
  1307  000A2C  EF22  F005         	goto	u850
  1308  000A30  5031               	movf	(dtoa@p+1)^0,w,c
  1309  000A32  E106               	bnz	u851
  1310  000A34  0430               	decf	dtoa@p^0,w,c
  1311  000A36  B0D8               	btfsc	status,0,c
  1312  000A38  EF20  F005         	goto	u851
  1313  000A3C  EF22  F005         	goto	u850
  1314  000A40                     u851:
  1315  000A40  EF7D  F004         	goto	l1377
  1316  000A44                     u850:
  1317  000A44  BE33               	btfsc	(dtoa@w+1)^0,7,c
  1318  000A46  EF2D  F005         	goto	u861
  1319  000A4A  5033               	movf	(dtoa@w+1)^0,w,c
  1320  000A4C  E108               	bnz	u860
  1321  000A4E  0432               	decf	dtoa@w^0,w,c
  1322  000A50  A0D8               	btfss	status,0,c
  1323  000A52  EF2D  F005         	goto	u861
  1324  000A56  EF2F  F005         	goto	u860
  1325  000A5A                     u861:
  1326  000A5A  EF37  F005         	goto	l1397
  1327  000A5E                     u860:
  1328  000A5E  0100               	movlb	0	; () banked
  1329  000A60  B375               	btfsc	_flags& (0+255),1,b
  1330  000A62  EF35  F005         	goto	u871
  1331  000A66  EF37  F005         	goto	u870
  1332  000A6A                     u871:
  1333  000A6A  EF7D  F004         	goto	l1377
  1334  000A6E                     u870:
  1335  000A6E                     l1397:
  1336                           
  1337                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 321:     if (s ||
      +                           (flags & (1 << 2))) {
  1338  000A6E  5034               	movf	dtoa@s^0,w,c
  1339  000A70  1035               	iorwf	(dtoa@s+1)^0,w,c
  1340  000A72  A4D8               	btfss	status,2,c
  1341  000A74  EF3E  F005         	goto	u881
  1342  000A78  EF40  F005         	goto	u880
  1343  000A7C                     u881:
  1344  000A7C  EF48  F005         	goto	l1401
  1345  000A80                     u880:
  1346  000A80  0100               	movlb	0	; () banked
  1347  000A82  A575               	btfss	_flags& (0+255),2,b
  1348  000A84  EF46  F005         	goto	u891
  1349  000A88  EF48  F005         	goto	u890
  1350  000A8C                     u891:
  1351  000A8C  EF66  F005         	goto	l1411
  1352  000A90                     u890:
  1353  000A90                     l1401:
  1354                           
  1355                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 322:         --i;
  1356  000A90  063E               	decf	dtoa@i^0,f,c
  1357  000A92  A0D8               	btfss	status,0,c
  1358  000A94  063F               	decf	(dtoa@i+1)^0,f,c
  1359  000A96                     
  1360                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 323:         dbuf
      +                          [i] = s ? '-' : '+';
  1361  000A96  5034               	movf	dtoa@s^0,w,c
  1362  000A98  1035               	iorwf	(dtoa@s+1)^0,w,c
  1363  000A9A  A4D8               	btfss	status,2,c
  1364  000A9C  EF52  F005         	goto	u901
  1365  000AA0  EF54  F005         	goto	u900
  1366  000AA4                     u901:
  1367  000AA4  EF5A  F005         	goto	l1407
  1368  000AA8                     u900:
  1369  000AA8  0E00               	movlw	0
  1370  000AAA  6E2F               	movwf	(_dtoa$894+1)^0,c
  1371  000AAC  0E2B               	movlw	43
  1372  000AAE  6E2E               	movwf	_dtoa$894^0,c
  1373  000AB0  EF5E  F005         	goto	l1409
  1374  000AB4                     l1407:
  1375  000AB4  0E00               	movlw	0
  1376  000AB6  6E2F               	movwf	(_dtoa$894+1)^0,c
  1377  000AB8  0E2D               	movlw	45
  1378  000ABA  6E2E               	movwf	_dtoa$894^0,c
  1379  000ABC                     l1409:
  1380  000ABC  0E77               	movlw	low _dbuf
  1381  000ABE  243E               	addwf	dtoa@i^0,w,c
  1382  000AC0  6ED9               	movwf	fsr2l,c
  1383  000AC2  0E00               	movlw	high _dbuf
  1384  000AC4  203F               	addwfc	(dtoa@i+1)^0,w,c
  1385  000AC6  6EDA               	movwf	fsr2h,c
  1386  000AC8  C02E  FFDF         	movff	_dtoa$894,indf2
  1387  000ACC                     l1411:
  1388                           
  1389                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 327:     return p
      +                          ad(fp, &dbuf[i], w);
  1390  000ACC  C01C  F011         	movff	dtoa@fp,pad@fp
  1391  000AD0  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  1392  000AD4  0E77               	movlw	low _dbuf
  1393  000AD6  243E               	addwf	dtoa@i^0,w,c
  1394  000AD8  6E13               	movwf	pad@buf^0,c
  1395  000ADA  0E00               	movlw	high _dbuf
  1396  000ADC  203F               	addwfc	(dtoa@i+1)^0,w,c
  1397  000ADE  6E14               	movwf	(pad@buf+1)^0,c
  1398  000AE0  C032  F015         	movff	dtoa@w,pad@p
  1399  000AE4  C033  F016         	movff	dtoa@w+1,pad@p+1
  1400  000AE8  EC30  F008         	call	_pad	;wreg free
  1401  000AEC  C011  F01C         	movff	?_pad,?_dtoa
  1402  000AF0  C012  F01D         	movff	?_pad+1,?_dtoa+1
  1403  000AF4  0012               	return		;funcret
  1404  000AF6                     __end_of_dtoa:
  1405                           	callstack 0
  1406                           
  1407 ;; *************** function _pad *****************
  1408 ;; Defined at:
  1409 ;;		line 72 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  1410 ;; Parameters:    Size  Location     Type
  1411 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1412 ;;		 -> sprintf@f(6), 
  1413 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1414 ;;		 -> dbuf(32), 
  1415 ;;  p               2   20[COMRAM] int 
  1416 ;; Auto vars:     Size  Location     Type
  1417 ;;  w               2   25[COMRAM] int 
  1418 ;;  i               2   23[COMRAM] int 
  1419 ;; Return value:  Size  Location     Type
  1420 ;;                  2   16[COMRAM] int 
  1421 ;; Registers used:
  1422 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1423 ;; Tracked objects:
  1424 ;;		On entry : 0/0
  1425 ;;		On exit  : 0/0
  1426 ;;		Unchanged: 0/0
  1427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1428 ;;      Params:         6       0       0       0       0       0       0       0       0
  1429 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1430 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1431 ;;      Totals:        11       0       0       0       0       0       0       0       0
  1432 ;;Total ram usage:       11 bytes
  1433 ;; Hardware stack levels used: 1
  1434 ;; Hardware stack levels required when called: 3
  1435 ;; This function calls:
  1436 ;;		_fputc
  1437 ;;		_fputs
  1438 ;;		_strlen
  1439 ;; This function is called by:
  1440 ;;		_dtoa
  1441 ;; This function uses a non-reentrant model
  1442 ;;
  1443                           
  1444                           	psect	text5
  1445  001060                     __ptext5:
  1446                           	callstack 0
  1447  001060                     _pad:
  1448                           	callstack 23
  1449  001060                     
  1450                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 72: static int pa
      +                          d(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\commo
      +                          n\doprnt.c: 73: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 
      +                          74:     int i, w;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 
      +                          77:     if (flags & (1 << 0)) {
  1451  001060  0100               	movlb	0	; () banked
  1452  001062  A175               	btfss	_flags& (0+255),0,b
  1453  001064  EF36  F008         	goto	u711
  1454  001068  EF38  F008         	goto	u710
  1455  00106C                     u711:
  1456  00106C  EF42  F008         	goto	l1331
  1457  001070                     u710:
  1458  001070                     
  1459                           ; BSR set to: 0
  1460                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 78:         fputs
      +                          ((const char *)buf, fp);
  1461  001070  C013  F00A         	movff	pad@buf,fputs@s
  1462  001074  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1463  001078  C011  F00C         	movff	pad@fp,fputs@fp
  1464  00107C  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1465  001080  EC5A  F009         	call	_fputs	;wreg free
  1466  001084                     l1331:
  1467                           
  1468                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 82:     w = (p < 
      +                          0) ? 0 : p;
  1469  001084  BE16               	btfsc	(pad@p+1)^0,7,c
  1470  001086  EF47  F008         	goto	u721
  1471  00108A  EF49  F008         	goto	u720
  1472  00108E                     u721:
  1473  00108E  EF4F  F008         	goto	l1335
  1474  001092                     u720:
  1475  001092  C015  F01A         	movff	pad@p,pad@w
  1476  001096  C016  F01B         	movff	pad@p+1,pad@w+1
  1477  00109A  EF53  F008         	goto	l786
  1478  00109E                     l1335:
  1479  00109E  0E00               	movlw	0
  1480  0010A0  6E1B               	movwf	(pad@w+1)^0,c
  1481  0010A2  0E00               	movlw	0
  1482  0010A4  6E1A               	movwf	pad@w^0,c
  1483  0010A6                     l786:
  1484                           
  1485                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 83:     i = 0;
  1486  0010A6  0E00               	movlw	0
  1487  0010A8  6E19               	movwf	(pad@i+1)^0,c
  1488  0010AA  0E00               	movlw	0
  1489  0010AC  6E18               	movwf	pad@i^0,c
  1490                           
  1491                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  1492  0010AE  EF65  F008         	goto	l1341
  1493  0010B2                     l1337:
  1494                           
  1495                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 85:         fputc
      +                          (' ', fp);
  1496  0010B2  0E00               	movlw	0
  1497  0010B4  6E02               	movwf	(fputc@c+1)^0,c
  1498  0010B6  0E20               	movlw	32
  1499  0010B8  6E01               	movwf	fputc@c^0,c
  1500  0010BA  C011  F003         	movff	pad@fp,fputc@fp
  1501  0010BE  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1502  0010C2  ECCB  F007         	call	_fputc	;wreg free
  1503  0010C6                     
  1504                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 86:         ++i;
  1505  0010C6  4A18               	infsnz	pad@i^0,f,c
  1506  0010C8  2A19               	incf	(pad@i+1)^0,f,c
  1507  0010CA                     l1341:
  1508                           
  1509                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  1510  0010CA  501A               	movf	pad@w^0,w,c
  1511  0010CC  5C18               	subwf	pad@i^0,w,c
  1512  0010CE  5019               	movf	(pad@i+1)^0,w,c
  1513  0010D0  0A80               	xorlw	128
  1514  0010D2  6E17               	movwf	??_pad^0,c
  1515  0010D4  501B               	movf	(pad@w+1)^0,w,c
  1516  0010D6  0A80               	xorlw	128
  1517  0010D8  5817               	subwfb	??_pad^0,w,c
  1518  0010DA  A0D8               	btfss	status,0,c
  1519  0010DC  EF72  F008         	goto	u731
  1520  0010E0  EF74  F008         	goto	u730
  1521  0010E4                     u731:
  1522  0010E4  EF59  F008         	goto	l1337
  1523  0010E8                     u730:
  1524  0010E8                     
  1525                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 90:     if (!(fla
      +                          gs & (1 << 0))) {
  1526  0010E8  0100               	movlb	0	; () banked
  1527  0010EA  B175               	btfsc	_flags& (0+255),0,b
  1528  0010EC  EF7A  F008         	goto	u741
  1529  0010F0  EF7C  F008         	goto	u740
  1530  0010F4                     u741:
  1531  0010F4  EF86  F008         	goto	l1345
  1532  0010F8                     u740:
  1533  0010F8                     
  1534                           ; BSR set to: 0
  1535                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 91:         fputs
      +                          ((const char *)buf, fp);
  1536  0010F8  C013  F00A         	movff	pad@buf,fputs@s
  1537  0010FC  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1538  001100  C011  F00C         	movff	pad@fp,fputs@fp
  1539  001104  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1540  001108  EC5A  F009         	call	_fputs	;wreg free
  1541  00110C                     l1345:
  1542                           
  1543                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 94:     return (i
      +                          nt)(strlen(buf) + (size_t)w);
  1544  00110C  C013  F001         	movff	pad@buf,strlen@s
  1545  001110  C014  F002         	movff	pad@buf+1,strlen@s+1
  1546  001114  ECB9  F009         	call	_strlen	;wreg free
  1547  001118  501A               	movf	pad@w^0,w,c
  1548  00111A  2401               	addwf	?_strlen^0,w,c
  1549  00111C  6E11               	movwf	?_pad^0,c
  1550  00111E  501B               	movf	(pad@w+1)^0,w,c
  1551  001120  2002               	addwfc	(?_strlen+1)^0,w,c
  1552  001122  6E12               	movwf	(?_pad+1)^0,c
  1553  001124  0012               	return		;funcret
  1554  001126                     __end_of_pad:
  1555                           	callstack 0
  1556                           
  1557 ;; *************** function _strlen *****************
  1558 ;; Defined at:
  1559 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\strlen.c"
  1560 ;; Parameters:    Size  Location     Type
  1561 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1562 ;;		 -> dbuf(32), 
  1563 ;; Auto vars:     Size  Location     Type
  1564 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1565 ;;		 -> dbuf(32), 
  1566 ;; Return value:  Size  Location     Type
  1567 ;;                  2    0[COMRAM] unsigned int 
  1568 ;; Registers used:
  1569 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1570 ;; Tracked objects:
  1571 ;;		On entry : 0/0
  1572 ;;		On exit  : 0/0
  1573 ;;		Unchanged: 0/0
  1574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1575 ;;      Params:         2       0       0       0       0       0       0       0       0
  1576 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1577 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1578 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1579 ;;Total ram usage:        4 bytes
  1580 ;; Hardware stack levels used: 1
  1581 ;; This function calls:
  1582 ;;		Nothing
  1583 ;; This function is called by:
  1584 ;;		_pad
  1585 ;; This function uses a non-reentrant model
  1586 ;;
  1587                           
  1588                           	psect	text6
  1589  001372                     __ptext6:
  1590                           	callstack 0
  1591  001372                     _strlen:
  1592                           	callstack 25
  1593  001372  C001  F003         	movff	strlen@s,strlen@a
  1594  001376  C002  F004         	movff	strlen@s+1,strlen@a+1
  1595  00137A  EFC1  F009         	goto	l1241
  1596  00137E                     l1239:
  1597  00137E  4A01               	infsnz	strlen@s^0,f,c
  1598  001380  2A02               	incf	(strlen@s+1)^0,f,c
  1599  001382                     l1241:
  1600  001382  C001  FFD9         	movff	strlen@s,fsr2l
  1601  001386  C002  FFDA         	movff	strlen@s+1,fsr2h
  1602  00138A  50DF               	movf	indf2,w,c
  1603  00138C  A4D8               	btfss	status,2,c
  1604  00138E  EFCB  F009         	goto	u571
  1605  001392  EFCD  F009         	goto	u570
  1606  001396                     u571:
  1607  001396  EFBF  F009         	goto	l1239
  1608  00139A                     u570:
  1609  00139A  5003               	movf	strlen@a^0,w,c
  1610  00139C  5C01               	subwf	strlen@s^0,w,c
  1611  00139E  6E01               	movwf	?_strlen^0,c
  1612  0013A0  5004               	movf	(strlen@a+1)^0,w,c
  1613  0013A2  5802               	subwfb	(strlen@s+1)^0,w,c
  1614  0013A4  6E02               	movwf	(?_strlen+1)^0,c
  1615  0013A6  0012               	return		;funcret
  1616  0013A8                     __end_of_strlen:
  1617                           	callstack 0
  1618                           
  1619 ;; *************** function _fputs *****************
  1620 ;; Defined at:
  1621 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_fputs.c"
  1622 ;; Parameters:    Size  Location     Type
  1623 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1624 ;;		 -> dbuf(32), 
  1625 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1626 ;;		 -> sprintf@f(6), 
  1627 ;; Auto vars:     Size  Location     Type
  1628 ;;  i               2   14[COMRAM] int 
  1629 ;;  c               1   13[COMRAM] unsigned char 
  1630 ;; Return value:  Size  Location     Type
  1631 ;;                  2    9[COMRAM] int 
  1632 ;; Registers used:
  1633 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1634 ;; Tracked objects:
  1635 ;;		On entry : 0/0
  1636 ;;		On exit  : 0/0
  1637 ;;		Unchanged: 0/0
  1638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1639 ;;      Params:         4       0       0       0       0       0       0       0       0
  1640 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1641 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1642 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1643 ;;Total ram usage:        7 bytes
  1644 ;; Hardware stack levels used: 1
  1645 ;; Hardware stack levels required when called: 2
  1646 ;; This function calls:
  1647 ;;		_fputc
  1648 ;; This function is called by:
  1649 ;;		_pad
  1650 ;; This function uses a non-reentrant model
  1651 ;;
  1652                           
  1653                           	psect	text7
  1654  0012B4                     __ptext7:
  1655                           	callstack 0
  1656  0012B4                     _fputs:
  1657                           	callstack 23
  1658  0012B4  0E00               	movlw	0
  1659  0012B6  6E10               	movwf	(fputs@i+1)^0,c
  1660  0012B8  0E00               	movlw	0
  1661  0012BA  6E0F               	movwf	fputs@i^0,c
  1662  0012BC  EF6B  F009         	goto	l1235
  1663  0012C0                     l1231:
  1664  0012C0  C00E  F001         	movff	fputs@c,fputc@c
  1665  0012C4  6A02               	clrf	(fputc@c+1)^0,c
  1666  0012C6  C00C  F003         	movff	fputs@fp,fputc@fp
  1667  0012CA  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  1668  0012CE  ECCB  F007         	call	_fputc	;wreg free
  1669  0012D2  4A0F               	infsnz	fputs@i^0,f,c
  1670  0012D4  2A10               	incf	(fputs@i+1)^0,f,c
  1671  0012D6                     l1235:
  1672  0012D6  500F               	movf	fputs@i^0,w,c
  1673  0012D8  240A               	addwf	fputs@s^0,w,c
  1674  0012DA  6ED9               	movwf	fsr2l,c
  1675  0012DC  5010               	movf	(fputs@i+1)^0,w,c
  1676  0012DE  200B               	addwfc	(fputs@s+1)^0,w,c
  1677  0012E0  6EDA               	movwf	fsr2h,c
  1678  0012E2  50DF               	movf	indf2,w,c
  1679  0012E4  6E0E               	movwf	fputs@c^0,c
  1680  0012E6  500E               	movf	fputs@c^0,w,c
  1681  0012E8  A4D8               	btfss	status,2,c
  1682  0012EA  EF79  F009         	goto	u561
  1683  0012EE  EF7B  F009         	goto	u560
  1684  0012F2                     u561:
  1685  0012F2  EF60  F009         	goto	l1231
  1686  0012F6                     u560:
  1687  0012F6  0012               	return		;funcret
  1688  0012F8                     __end_of_fputs:
  1689                           	callstack 0
  1690                           
  1691 ;; *************** function _fputc *****************
  1692 ;; Defined at:
  1693 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_fputc.c"
  1694 ;; Parameters:    Size  Location     Type
  1695 ;;  c               2    0[COMRAM] int 
  1696 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  1697 ;;		 -> sprintf@f(6), 
  1698 ;; Auto vars:     Size  Location     Type
  1699 ;;		None
  1700 ;; Return value:  Size  Location     Type
  1701 ;;                  2    0[COMRAM] int 
  1702 ;; Registers used:
  1703 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1704 ;; Tracked objects:
  1705 ;;		On entry : 0/0
  1706 ;;		On exit  : 0/0
  1707 ;;		Unchanged: 0/0
  1708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1709 ;;      Params:         4       0       0       0       0       0       0       0       0
  1710 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1711 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1712 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1713 ;;Total ram usage:        9 bytes
  1714 ;; Hardware stack levels used: 1
  1715 ;; Hardware stack levels required when called: 1
  1716 ;; This function calls:
  1717 ;;		_putch
  1718 ;; This function is called by:
  1719 ;;		_pad
  1720 ;;		_vfpfcnvrt
  1721 ;;		_fputs
  1722 ;; This function uses a non-reentrant model
  1723 ;;
  1724                           
  1725                           	psect	text8
  1726  000F96                     __ptext8:
  1727                           	callstack 0
  1728  000F96                     _fputc:
  1729                           	callstack 26
  1730  000F96  5003               	movf	fputc@fp^0,w,c
  1731  000F98  1004               	iorwf	(fputc@fp+1)^0,w,c
  1732  000F9A  B4D8               	btfsc	status,2,c
  1733  000F9C  EFD2  F007         	goto	u521
  1734  000FA0  EFD4  F007         	goto	u520
  1735  000FA4                     u521:
  1736  000FA4  EFDD  F007         	goto	l1219
  1737  000FA8                     u520:
  1738  000FA8  5003               	movf	fputc@fp^0,w,c
  1739  000FAA  1004               	iorwf	(fputc@fp+1)^0,w,c
  1740  000FAC  A4D8               	btfss	status,2,c
  1741  000FAE  EFDB  F007         	goto	u531
  1742  000FB2  EFDD  F007         	goto	u530
  1743  000FB6                     u531:
  1744  000FB6  EFE2  F007         	goto	l1221
  1745  000FBA                     u530:
  1746  000FBA                     l1219:
  1747  000FBA  5001               	movf	fputc@c^0,w,c
  1748  000FBC  EC41  F00A         	call	_putch
  1749  000FC0  EF2F  F008         	goto	l850
  1750  000FC4                     l1221:
  1751  000FC4  EE20 F004          	lfsr	2,4
  1752  000FC8  5003               	movf	fputc@fp^0,w,c
  1753  000FCA  26D9               	addwf	fsr2l,f,c
  1754  000FCC  5004               	movf	(fputc@fp+1)^0,w,c
  1755  000FCE  22DA               	addwfc	fsr2h,f,c
  1756  000FD0  50DE               	movf	postinc2,w,c
  1757  000FD2  10DE               	iorwf	postinc2,w,c
  1758  000FD4  B4D8               	btfsc	status,2,c
  1759  000FD6  EFEF  F007         	goto	u541
  1760  000FDA  EFF1  F007         	goto	u540
  1761  000FDE                     u541:
  1762  000FDE  EF0C  F008         	goto	l1225
  1763  000FE2                     u540:
  1764  000FE2  EE20 F004          	lfsr	2,4
  1765  000FE6  5003               	movf	fputc@fp^0,w,c
  1766  000FE8  26D9               	addwf	fsr2l,f,c
  1767  000FEA  5004               	movf	(fputc@fp+1)^0,w,c
  1768  000FEC  22DA               	addwfc	fsr2h,f,c
  1769  000FEE  EE10 F002          	lfsr	1,2
  1770  000FF2  5003               	movf	fputc@fp^0,w,c
  1771  000FF4  26E1               	addwf	fsr1l,f,c
  1772  000FF6  5004               	movf	(fputc@fp+1)^0,w,c
  1773  000FF8  22E2               	addwfc	fsr1h,f,c
  1774  000FFA  50DE               	movf	postinc2,w,c
  1775  000FFC  5CE6               	subwf	postinc1,w,c
  1776  000FFE  50E6               	movf	postinc1,w,c
  1777  001000  0A80               	xorlw	128
  1778  001002  6E09               	movwf	(??_fputc+4)^0,c
  1779  001004  50DE               	movf	postinc2,w,c
  1780  001006  0A80               	xorlw	128
  1781  001008  5809               	subwfb	(??_fputc+4)^0,w,c
  1782  00100A  B0D8               	btfsc	status,0,c
  1783  00100C  EF0A  F008         	goto	u551
  1784  001010  EF0C  F008         	goto	u550
  1785  001014                     u551:
  1786  001014  EF2F  F008         	goto	l850
  1787  001018                     u550:
  1788  001018                     l1225:
  1789  001018  EE20 F002          	lfsr	2,2
  1790  00101C  5003               	movf	fputc@fp^0,w,c
  1791  00101E  26D9               	addwf	fsr2l,f,c
  1792  001020  5004               	movf	(fputc@fp+1)^0,w,c
  1793  001022  22DA               	addwfc	fsr2h,f,c
  1794  001024  CFDE F005          	movff	postinc2,??_fputc
  1795  001028  CFDD F006          	movff	postdec2,??_fputc+1
  1796  00102C  C003  FFD9         	movff	fputc@fp,fsr2l
  1797  001030  C004  FFDA         	movff	fputc@fp+1,fsr2h
  1798  001034  CFDE F007          	movff	postinc2,??_fputc+2
  1799  001038  CFDD F008          	movff	postdec2,??_fputc+3
  1800  00103C  5005               	movf	??_fputc^0,w,c
  1801  00103E  2407               	addwf	(??_fputc+2)^0,w,c
  1802  001040  6ED9               	movwf	fsr2l,c
  1803  001042  5006               	movf	(??_fputc+1)^0,w,c
  1804  001044  2008               	addwfc	(??_fputc+3)^0,w,c
  1805  001046  6EDA               	movwf	fsr2h,c
  1806  001048  C001  FFDF         	movff	fputc@c,indf2
  1807  00104C  EE20 F002          	lfsr	2,2
  1808  001050  5003               	movf	fputc@fp^0,w,c
  1809  001052  26D9               	addwf	fsr2l,f,c
  1810  001054  5004               	movf	(fputc@fp+1)^0,w,c
  1811  001056  22DA               	addwfc	fsr2h,f,c
  1812  001058  2ADE               	incf	postinc2,f,c
  1813  00105A  0E00               	movlw	0
  1814  00105C  22DD               	addwfc	postdec2,f,c
  1815  00105E                     l850:
  1816  00105E  0012               	return		;funcret
  1817  001060                     __end_of_fputc:
  1818                           	callstack 0
  1819                           
  1820 ;; *************** function _putch *****************
  1821 ;; Defined at:
  1822 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\putch.c"
  1823 ;; Parameters:    Size  Location     Type
  1824 ;;  c               1    wreg     unsigned char 
  1825 ;; Auto vars:     Size  Location     Type
  1826 ;;  c               1    0[COMRAM] unsigned char 
  1827 ;; Return value:  Size  Location     Type
  1828 ;;                  1    wreg      void 
  1829 ;; Registers used:
  1830 ;;		wreg
  1831 ;; Tracked objects:
  1832 ;;		On entry : 0/0
  1833 ;;		On exit  : 0/0
  1834 ;;		Unchanged: 0/0
  1835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1836 ;;      Params:         0       0       0       0       0       0       0       0       0
  1837 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1838 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1839 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1840 ;;Total ram usage:        0 bytes
  1841 ;; Hardware stack levels used: 1
  1842 ;; This function calls:
  1843 ;;		Nothing
  1844 ;; This function is called by:
  1845 ;;		_fputc
  1846 ;; This function uses a non-reentrant model
  1847 ;;
  1848                           
  1849                           	psect	text9
  1850  001482                     __ptext9:
  1851                           	callstack 0
  1852  001482                     _putch:
  1853                           	callstack 26
  1854  001482  0012               	return		;funcret
  1855  001484                     __end_of_putch:
  1856                           	callstack 0
  1857                           
  1858 ;; *************** function _abs *****************
  1859 ;; Defined at:
  1860 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\abs.c"
  1861 ;; Parameters:    Size  Location     Type
  1862 ;;  a               2   18[COMRAM] int 
  1863 ;; Auto vars:     Size  Location     Type
  1864 ;;		None
  1865 ;; Return value:  Size  Location     Type
  1866 ;;                  2   18[COMRAM] int 
  1867 ;; Registers used:
  1868 ;;		wreg, status,2, status,0
  1869 ;; Tracked objects:
  1870 ;;		On entry : 0/0
  1871 ;;		On exit  : 0/0
  1872 ;;		Unchanged: 0/0
  1873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1874 ;;      Params:         2       0       0       0       0       0       0       0       0
  1875 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1876 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1877 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1878 ;;Total ram usage:        4 bytes
  1879 ;; Hardware stack levels used: 1
  1880 ;; This function calls:
  1881 ;;		Nothing
  1882 ;; This function is called by:
  1883 ;;		_dtoa
  1884 ;; This function uses a non-reentrant model
  1885 ;;
  1886                           
  1887                           	psect	text10
  1888  0012F8                     __ptext10:
  1889                           	callstack 0
  1890  0012F8                     _abs:
  1891                           	callstack 26
  1892  0012F8  BE14               	btfsc	(abs@a+1)^0,7,c
  1893  0012FA  EF89  F009         	goto	u750
  1894  0012FE  5014               	movf	(abs@a+1)^0,w,c
  1895  001300  E106               	bnz	u751
  1896  001302  0413               	decf	abs@a^0,w,c
  1897  001304  B0D8               	btfsc	status,0,c
  1898  001306  EF87  F009         	goto	u751
  1899  00130A  EF89  F009         	goto	u750
  1900  00130E                     u751:
  1901  00130E  EF97  F009         	goto	l835
  1902  001312                     u750:
  1903  001312  C013  F015         	movff	abs@a,??_abs
  1904  001316  C014  F016         	movff	abs@a+1,??_abs+1
  1905  00131A  1E15               	comf	??_abs^0,f,c
  1906  00131C  1E16               	comf	(??_abs+1)^0,f,c
  1907  00131E  4A15               	infsnz	??_abs^0,f,c
  1908  001320  2A16               	incf	(??_abs+1)^0,f,c
  1909  001322  C015  F013         	movff	??_abs,?_abs
  1910  001326  C016  F014         	movff	??_abs+1,?_abs+1
  1911  00132A  EF9B  F009         	goto	l838
  1912  00132E                     l835:
  1913  00132E  C013  F013         	movff	abs@a,?_abs
  1914  001332  C014  F014         	movff	abs@a+1,?_abs+1
  1915  001336                     l838:
  1916  001336  0012               	return		;funcret
  1917  001338                     __end_of_abs:
  1918                           	callstack 0
  1919                           
  1920 ;; *************** function ___aomod *****************
  1921 ;; Defined at:
  1922 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\aomod.c"
  1923 ;; Parameters:    Size  Location     Type
  1924 ;;  dividend        8    0[COMRAM] long long 
  1925 ;;  divisor         8    8[COMRAM] long long 
  1926 ;; Auto vars:     Size  Location     Type
  1927 ;;  sign            1   17[COMRAM] unsigned char 
  1928 ;;  counter         1   16[COMRAM] unsigned char 
  1929 ;; Return value:  Size  Location     Type
  1930 ;;                  8    0[COMRAM] long long 
  1931 ;; Registers used:
  1932 ;;		wreg, status,2, status,0
  1933 ;; Tracked objects:
  1934 ;;		On entry : 0/0
  1935 ;;		On exit  : 0/0
  1936 ;;		Unchanged: 0/0
  1937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1938 ;;      Params:        16       0       0       0       0       0       0       0       0
  1939 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1940 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1941 ;;      Totals:        18       0       0       0       0       0       0       0       0
  1942 ;;Total ram usage:       18 bytes
  1943 ;; Hardware stack levels used: 1
  1944 ;; This function calls:
  1945 ;;		Nothing
  1946 ;; This function is called by:
  1947 ;;		_dtoa
  1948 ;; This function uses a non-reentrant model
  1949 ;;
  1950                           
  1951                           	psect	text11
  1952  000E32                     __ptext11:
  1953                           	callstack 0
  1954  000E32                     ___aomod:
  1955                           	callstack 26
  1956  000E32  0E00               	movlw	0
  1957  000E34  6E12               	movwf	___aomod@sign^0,c
  1958  000E36  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  1959  000E38  EF22  F007         	goto	u650
  1960  000E3C  EF20  F007         	goto	u651
  1961  000E40                     u651:
  1962  000E40  EF34  F007         	goto	l1299
  1963  000E44                     u650:
  1964  000E44  1E08               	comf	(___aomod@dividend+7)^0,f,c
  1965  000E46  1E07               	comf	(___aomod@dividend+6)^0,f,c
  1966  000E48  1E06               	comf	(___aomod@dividend+5)^0,f,c
  1967  000E4A  1E05               	comf	(___aomod@dividend+4)^0,f,c
  1968  000E4C  1E04               	comf	(___aomod@dividend+3)^0,f,c
  1969  000E4E  1E03               	comf	(___aomod@dividend+2)^0,f,c
  1970  000E50  1E02               	comf	(___aomod@dividend+1)^0,f,c
  1971  000E52  6C01               	negf	___aomod@dividend^0,c
  1972  000E54  0E00               	movlw	0
  1973  000E56  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  1974  000E58  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  1975  000E5A  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  1976  000E5C  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  1977  000E5E  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  1978  000E60  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  1979  000E62  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  1980  000E64  0E01               	movlw	1
  1981  000E66  6E12               	movwf	___aomod@sign^0,c
  1982  000E68                     l1299:
  1983  000E68  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  1984  000E6A  EF3B  F007         	goto	u660
  1985  000E6E  EF39  F007         	goto	u661
  1986  000E72                     u661:
  1987  000E72  EF4B  F007         	goto	l1303
  1988  000E76                     u660:
  1989  000E76  1E10               	comf	(___aomod@divisor+7)^0,f,c
  1990  000E78  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  1991  000E7A  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  1992  000E7C  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  1993  000E7E  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  1994  000E80  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  1995  000E82  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  1996  000E84  6C09               	negf	___aomod@divisor^0,c
  1997  000E86  0E00               	movlw	0
  1998  000E88  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  1999  000E8A  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  2000  000E8C  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  2001  000E8E  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  2002  000E90  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  2003  000E92  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  2004  000E94  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  2005  000E96                     l1303:
  2006  000E96  5009               	movf	___aomod@divisor^0,w,c
  2007  000E98  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  2008  000E9A  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  2009  000E9C  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  2010  000E9E  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  2011  000EA0  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  2012  000EA2  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  2013  000EA4  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  2014  000EA6  B4D8               	btfsc	status,2,c
  2015  000EA8  EF58  F007         	goto	u671
  2016  000EAC  EF5A  F007         	goto	u670
  2017  000EB0                     u671:
  2018  000EB0  EFA2  F007         	goto	l1319
  2019  000EB4                     u670:
  2020  000EB4  0E01               	movlw	1
  2021  000EB6  6E11               	movwf	___aomod@counter^0,c
  2022  000EB8  EF68  F007         	goto	l1309
  2023  000EBC                     l1307:
  2024  000EBC  90D8               	bcf	status,0,c
  2025  000EBE  3609               	rlcf	___aomod@divisor^0,f,c
  2026  000EC0  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  2027  000EC2  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  2028  000EC4  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  2029  000EC6  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  2030  000EC8  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  2031  000ECA  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  2032  000ECC  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  2033  000ECE  2A11               	incf	___aomod@counter^0,f,c
  2034  000ED0                     l1309:
  2035  000ED0  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  2036  000ED2  EF6D  F007         	goto	u681
  2037  000ED6  EF6F  F007         	goto	u680
  2038  000EDA                     u681:
  2039  000EDA  EF5E  F007         	goto	l1307
  2040  000EDE                     u680:
  2041  000EDE                     l1311:
  2042  000EDE  5009               	movf	___aomod@divisor^0,w,c
  2043  000EE0  5C01               	subwf	___aomod@dividend^0,w,c
  2044  000EE2  500A               	movf	(___aomod@divisor+1)^0,w,c
  2045  000EE4  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  2046  000EE6  500B               	movf	(___aomod@divisor+2)^0,w,c
  2047  000EE8  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  2048  000EEA  500C               	movf	(___aomod@divisor+3)^0,w,c
  2049  000EEC  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  2050  000EEE  500D               	movf	(___aomod@divisor+4)^0,w,c
  2051  000EF0  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  2052  000EF2  500E               	movf	(___aomod@divisor+5)^0,w,c
  2053  000EF4  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  2054  000EF6  500F               	movf	(___aomod@divisor+6)^0,w,c
  2055  000EF8  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  2056  000EFA  5010               	movf	(___aomod@divisor+7)^0,w,c
  2057  000EFC  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  2058  000EFE  A0D8               	btfss	status,0,c
  2059  000F00  EF84  F007         	goto	u691
  2060  000F04  EF86  F007         	goto	u690
  2061  000F08                     u691:
  2062  000F08  EF96  F007         	goto	l1315
  2063  000F0C                     u690:
  2064  000F0C  5009               	movf	___aomod@divisor^0,w,c
  2065  000F0E  5E01               	subwf	___aomod@dividend^0,f,c
  2066  000F10  500A               	movf	(___aomod@divisor+1)^0,w,c
  2067  000F12  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  2068  000F14  500B               	movf	(___aomod@divisor+2)^0,w,c
  2069  000F16  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  2070  000F18  500C               	movf	(___aomod@divisor+3)^0,w,c
  2071  000F1A  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  2072  000F1C  500D               	movf	(___aomod@divisor+4)^0,w,c
  2073  000F1E  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  2074  000F20  500E               	movf	(___aomod@divisor+5)^0,w,c
  2075  000F22  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  2076  000F24  500F               	movf	(___aomod@divisor+6)^0,w,c
  2077  000F26  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  2078  000F28  5010               	movf	(___aomod@divisor+7)^0,w,c
  2079  000F2A  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  2080  000F2C                     l1315:
  2081  000F2C  90D8               	bcf	status,0,c
  2082  000F2E  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  2083  000F30  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  2084  000F32  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  2085  000F34  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  2086  000F36  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  2087  000F38  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  2088  000F3A  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  2089  000F3C  3209               	rrcf	___aomod@divisor^0,f,c
  2090  000F3E  2E11               	decfsz	___aomod@counter^0,f,c
  2091  000F40  EF6F  F007         	goto	l1311
  2092  000F44                     l1319:
  2093  000F44  5012               	movf	___aomod@sign^0,w,c
  2094  000F46  B4D8               	btfsc	status,2,c
  2095  000F48  EFA8  F007         	goto	u701
  2096  000F4C  EFAA  F007         	goto	u700
  2097  000F50                     u701:
  2098  000F50  EFBA  F007         	goto	l1323
  2099  000F54                     u700:
  2100  000F54  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2101  000F56  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2102  000F58  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2103  000F5A  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2104  000F5C  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2105  000F5E  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2106  000F60  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2107  000F62  6C01               	negf	___aomod@dividend^0,c
  2108  000F64  0E00               	movlw	0
  2109  000F66  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2110  000F68  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2111  000F6A  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2112  000F6C  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2113  000F6E  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2114  000F70  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2115  000F72  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2116  000F74                     l1323:
  2117  000F74  C001  F001         	movff	___aomod@dividend,?___aomod
  2118  000F78  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2119  000F7C  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2120  000F80  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2121  000F84  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2122  000F88  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2123  000F8C  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2124  000F90  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2125  000F94  0012               	return		;funcret
  2126  000F96                     __end_of___aomod:
  2127                           	callstack 0
  2128                           
  2129 ;; *************** function ___aodiv *****************
  2130 ;; Defined at:
  2131 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\aodiv.c"
  2132 ;; Parameters:    Size  Location     Type
  2133 ;;  dividend        8    0[COMRAM] long long 
  2134 ;;  divisor         8    8[COMRAM] long long 
  2135 ;; Auto vars:     Size  Location     Type
  2136 ;;  quotient        8   18[COMRAM] long long 
  2137 ;;  sign            1   17[COMRAM] unsigned char 
  2138 ;;  counter         1   16[COMRAM] unsigned char 
  2139 ;; Return value:  Size  Location     Type
  2140 ;;                  8    0[COMRAM] long long 
  2141 ;; Registers used:
  2142 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2143 ;; Tracked objects:
  2144 ;;		On entry : 0/0
  2145 ;;		On exit  : 0/0
  2146 ;;		Unchanged: 0/0
  2147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2148 ;;      Params:        16       0       0       0       0       0       0       0       0
  2149 ;;      Locals:        10       0       0       0       0       0       0       0       0
  2150 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2151 ;;      Totals:        26       0       0       0       0       0       0       0       0
  2152 ;;Total ram usage:       26 bytes
  2153 ;; Hardware stack levels used: 1
  2154 ;; This function calls:
  2155 ;;		Nothing
  2156 ;; This function is called by:
  2157 ;;		_dtoa
  2158 ;; This function uses a non-reentrant model
  2159 ;;
  2160                           
  2161                           	psect	text12
  2162  000CAA                     __ptext12:
  2163                           	callstack 0
  2164  000CAA                     ___aodiv:
  2165                           	callstack 26
  2166  000CAA  0E00               	movlw	0
  2167  000CAC  6E12               	movwf	___aodiv@sign^0,c
  2168  000CAE  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  2169  000CB0  EF5E  F006         	goto	u580
  2170  000CB4  EF5C  F006         	goto	u581
  2171  000CB8                     u581:
  2172  000CB8  EF70  F006         	goto	l1255
  2173  000CBC                     u580:
  2174  000CBC  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  2175  000CBE  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  2176  000CC0  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  2177  000CC2  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  2178  000CC4  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  2179  000CC6  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  2180  000CC8  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  2181  000CCA  6C09               	negf	___aodiv@divisor^0,c
  2182  000CCC  0E00               	movlw	0
  2183  000CCE  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  2184  000CD0  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  2185  000CD2  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  2186  000CD4  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  2187  000CD6  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  2188  000CD8  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  2189  000CDA  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  2190  000CDC  0E01               	movlw	1
  2191  000CDE  6E12               	movwf	___aodiv@sign^0,c
  2192  000CE0                     l1255:
  2193  000CE0  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  2194  000CE2  EF77  F006         	goto	u590
  2195  000CE6  EF75  F006         	goto	u591
  2196  000CEA                     u591:
  2197  000CEA  EF89  F006         	goto	l1261
  2198  000CEE                     u590:
  2199  000CEE  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  2200  000CF0  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  2201  000CF2  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  2202  000CF4  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  2203  000CF6  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  2204  000CF8  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  2205  000CFA  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  2206  000CFC  6C01               	negf	___aodiv@dividend^0,c
  2207  000CFE  0E00               	movlw	0
  2208  000D00  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  2209  000D02  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  2210  000D04  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  2211  000D06  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  2212  000D08  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  2213  000D0A  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  2214  000D0C  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  2215  000D0E  0E01               	movlw	1
  2216  000D10  1A12               	xorwf	___aodiv@sign^0,f,c
  2217  000D12                     l1261:
  2218  000D12  EE20  F013         	lfsr	2,___aodiv@quotient
  2219  000D16  0E07               	movlw	7
  2220  000D18                     u601:
  2221  000D18  6ADE               	clrf	postinc2,c
  2222  000D1A  06E8               	decf	wreg,f,c
  2223  000D1C  E2FD               	bc	u601
  2224  000D1E  5009               	movf	___aodiv@divisor^0,w,c
  2225  000D20  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  2226  000D22  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  2227  000D24  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  2228  000D26  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  2229  000D28  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  2230  000D2A  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  2231  000D2C  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  2232  000D2E  B4D8               	btfsc	status,2,c
  2233  000D30  EF9C  F006         	goto	u611
  2234  000D34  EF9E  F006         	goto	u610
  2235  000D38                     u611:
  2236  000D38  EFF0  F006         	goto	l1283
  2237  000D3C                     u610:
  2238  000D3C  0E01               	movlw	1
  2239  000D3E  6E11               	movwf	___aodiv@counter^0,c
  2240  000D40  EFAC  F006         	goto	l1269
  2241  000D44                     l1267:
  2242  000D44  90D8               	bcf	status,0,c
  2243  000D46  3609               	rlcf	___aodiv@divisor^0,f,c
  2244  000D48  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  2245  000D4A  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  2246  000D4C  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  2247  000D4E  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  2248  000D50  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  2249  000D52  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  2250  000D54  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  2251  000D56  2A11               	incf	___aodiv@counter^0,f,c
  2252  000D58                     l1269:
  2253  000D58  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  2254  000D5A  EFB1  F006         	goto	u621
  2255  000D5E  EFB3  F006         	goto	u620
  2256  000D62                     u621:
  2257  000D62  EFA2  F006         	goto	l1267
  2258  000D66                     u620:
  2259  000D66                     l1271:
  2260  000D66  90D8               	bcf	status,0,c
  2261  000D68  3613               	rlcf	___aodiv@quotient^0,f,c
  2262  000D6A  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  2263  000D6C  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  2264  000D6E  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  2265  000D70  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  2266  000D72  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  2267  000D74  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  2268  000D76  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  2269  000D78  5009               	movf	___aodiv@divisor^0,w,c
  2270  000D7A  5C01               	subwf	___aodiv@dividend^0,w,c
  2271  000D7C  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2272  000D7E  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  2273  000D80  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2274  000D82  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  2275  000D84  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2276  000D86  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  2277  000D88  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2278  000D8A  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  2279  000D8C  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2280  000D8E  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  2281  000D90  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2282  000D92  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  2283  000D94  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2284  000D96  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  2285  000D98  A0D8               	btfss	status,0,c
  2286  000D9A  EFD1  F006         	goto	u631
  2287  000D9E  EFD3  F006         	goto	u630
  2288  000DA2                     u631:
  2289  000DA2  EFE4  F006         	goto	l1279
  2290  000DA6                     u630:
  2291  000DA6  5009               	movf	___aodiv@divisor^0,w,c
  2292  000DA8  5E01               	subwf	___aodiv@dividend^0,f,c
  2293  000DAA  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2294  000DAC  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  2295  000DAE  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2296  000DB0  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  2297  000DB2  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2298  000DB4  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  2299  000DB6  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2300  000DB8  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  2301  000DBA  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2302  000DBC  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  2303  000DBE  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2304  000DC0  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  2305  000DC2  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2306  000DC4  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  2307  000DC6  8013               	bsf	___aodiv@quotient^0,0,c
  2308  000DC8                     l1279:
  2309  000DC8  90D8               	bcf	status,0,c
  2310  000DCA  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  2311  000DCC  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  2312  000DCE  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  2313  000DD0  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  2314  000DD2  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  2315  000DD4  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  2316  000DD6  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  2317  000DD8  3209               	rrcf	___aodiv@divisor^0,f,c
  2318  000DDA  2E11               	decfsz	___aodiv@counter^0,f,c
  2319  000DDC  EFB3  F006         	goto	l1271
  2320  000DE0                     l1283:
  2321  000DE0  5012               	movf	___aodiv@sign^0,w,c
  2322  000DE2  B4D8               	btfsc	status,2,c
  2323  000DE4  EFF6  F006         	goto	u641
  2324  000DE8  EFF8  F006         	goto	u640
  2325  000DEC                     u641:
  2326  000DEC  EF08  F007         	goto	l1287
  2327  000DF0                     u640:
  2328  000DF0  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  2329  000DF2  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  2330  000DF4  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  2331  000DF6  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  2332  000DF8  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  2333  000DFA  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  2334  000DFC  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  2335  000DFE  6C13               	negf	___aodiv@quotient^0,c
  2336  000E00  0E00               	movlw	0
  2337  000E02  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  2338  000E04  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  2339  000E06  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  2340  000E08  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  2341  000E0A  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  2342  000E0C  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  2343  000E0E  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  2344  000E10                     l1287:
  2345  000E10  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2346  000E14  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2347  000E18  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2348  000E1C  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2349  000E20  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2350  000E24  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2351  000E28  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2352  000E2C  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2353  000E30  0012               	return		;funcret
  2354  000E32                     __end_of___aodiv:
  2355                           	callstack 0
  2356                           
  2357 ;; *************** function _LCD_TEXT *****************
  2358 ;; Defined at:
  2359 ;;		line 74 in file "main.c"
  2360 ;; Parameters:    Size  Location     Type
  2361 ;;  text            2    2[COMRAM] PTR unsigned char 
  2362 ;;		 -> STR_1(9), main@buf(15), 
  2363 ;; Auto vars:     Size  Location     Type
  2364 ;;		None
  2365 ;; Return value:  Size  Location     Type
  2366 ;;                  1    wreg      void 
  2367 ;; Registers used:
  2368 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2369 ;; Tracked objects:
  2370 ;;		On entry : 0/0
  2371 ;;		On exit  : 0/0
  2372 ;;		Unchanged: 0/0
  2373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2374 ;;      Params:         2       0       0       0       0       0       0       0       0
  2375 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2376 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2377 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2378 ;;Total ram usage:        2 bytes
  2379 ;; Hardware stack levels used: 1
  2380 ;; Hardware stack levels required when called: 1
  2381 ;; This function calls:
  2382 ;;		_LCD_DATA
  2383 ;; This function is called by:
  2384 ;;		_main
  2385 ;; This function uses a non-reentrant model
  2386 ;;
  2387                           
  2388                           	psect	text13
  2389  001204                     __ptext13:
  2390                           	callstack 0
  2391  001204                     _LCD_TEXT:
  2392                           	callstack 29
  2393  001204                     
  2394                           ;main.c: 75:     while(*text != '\0')
  2395  001204  EF18  F009         	goto	l1511
  2396  001208                     l1507:
  2397                           
  2398                           ;main.c: 76:     {;main.c: 77:         LCD_DATA(*text);
  2399  001208  C003  FFF6         	movff	LCD_TEXT@text,tblptrl
  2400  00120C  C004  FFF7         	movff	LCD_TEXT@text+1,tblptrh
  2401  001210  6AF8               	clrf	tblptru,c
  2402  001212  0E07               	movlw	(high __ramtop+-1)
  2403  001214  64F7               	cpfsgt	tblptrh,c
  2404  001216  D003               	bra	u967
  2405  001218  0008               	tblrd		*
  2406  00121A  50F5               	movf	tablat,w,c
  2407  00121C  D005               	bra	u960
  2408  00121E                     u967:
  2409  00121E  CFF6 FFE1          	movff	tblptrl,fsr1l
  2410  001222  CFF7 FFE2          	movff	tblptrh,fsr1h
  2411  001226  50E7               	movf	indf1,w,c
  2412  001228                     u960:
  2413  001228  ECED  F009         	call	_LCD_DATA
  2414  00122C                     
  2415                           ;main.c: 78:         ++text;
  2416  00122C  4A03               	infsnz	LCD_TEXT@text^0,f,c
  2417  00122E  2A04               	incf	(LCD_TEXT@text+1)^0,f,c
  2418  001230                     l1511:
  2419                           
  2420                           ;main.c: 75:     while(*text != '\0')
  2421  001230  C003  FFF6         	movff	LCD_TEXT@text,tblptrl
  2422  001234  C004  FFF7         	movff	LCD_TEXT@text+1,tblptrh
  2423  001238  6AF8               	clrf	tblptru,c
  2424  00123A  0E07               	movlw	(high __ramtop+-1)
  2425  00123C  64F7               	cpfsgt	tblptrh,c
  2426  00123E  D003               	bra	u977
  2427  001240  0008               	tblrd		*
  2428  001242  50F5               	movf	tablat,w,c
  2429  001244  D005               	bra	u970
  2430  001246                     u977:
  2431  001246  CFF6 FFE1          	movff	tblptrl,fsr1l
  2432  00124A  CFF7 FFE2          	movff	tblptrh,fsr1h
  2433  00124E  50E7               	movf	indf1,w,c
  2434  001250                     u970:
  2435  001250  0900               	iorlw	0
  2436  001252  A4D8               	btfss	status,2,c
  2437  001254  EF2E  F009         	goto	u981
  2438  001258  EF30  F009         	goto	u980
  2439  00125C                     u981:
  2440  00125C  EF04  F009         	goto	l1507
  2441  001260                     u980:
  2442  001260  0012               	return		;funcret
  2443  001262                     __end_of_LCD_TEXT:
  2444                           	callstack 0
  2445                           
  2446 ;; *************** function _LCD_DATA *****************
  2447 ;; Defined at:
  2448 ;;		line 102 in file "main.c"
  2449 ;; Parameters:    Size  Location     Type
  2450 ;;  data            1    wreg     unsigned char 
  2451 ;; Auto vars:     Size  Location     Type
  2452 ;;  data            1    1[COMRAM] unsigned char 
  2453 ;; Return value:  Size  Location     Type
  2454 ;;                  1    wreg      void 
  2455 ;; Registers used:
  2456 ;;		wreg
  2457 ;; Tracked objects:
  2458 ;;		On entry : 0/0
  2459 ;;		On exit  : 0/0
  2460 ;;		Unchanged: 0/0
  2461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2462 ;;      Params:         0       0       0       0       0       0       0       0       0
  2463 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2464 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2465 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2466 ;;Total ram usage:        2 bytes
  2467 ;; Hardware stack levels used: 1
  2468 ;; This function calls:
  2469 ;;		Nothing
  2470 ;; This function is called by:
  2471 ;;		_LCD_TEXT
  2472 ;; This function uses a non-reentrant model
  2473 ;;
  2474                           
  2475                           	psect	text14
  2476  0013DA                     __ptext14:
  2477                           	callstack 0
  2478  0013DA                     _LCD_DATA:
  2479                           	callstack 29
  2480                           
  2481                           ;incstack = 0
  2482                           ;LCD_DATA@data stored from wreg
  2483  0013DA  6E02               	movwf	LCD_DATA@data^0,c
  2484  0013DC                     
  2485                           ;main.c: 103:     PORTBbits.RB0 = 1;
  2486  0013DC  8081               	bsf	129,0,c	;volatile
  2487  0013DE                     
  2488                           ;main.c: 104:     _delay((unsigned long)((1)*(8000000/4000.0)));
  2489  0013DE  0E03               	movlw	3
  2490  0013E0  6E01               	movwf	??_LCD_DATA^0,c
  2491  0013E2  0E98               	movlw	152
  2492  0013E4                     u1047:
  2493  0013E4  2EE8               	decfsz	wreg,f,c
  2494  0013E6  D7FE               	bra	u1047
  2495  0013E8  2E01               	decfsz	??_LCD_DATA^0,f,c
  2496  0013EA  D7FC               	bra	u1047
  2497  0013EC                     
  2498                           ;main.c: 105:      PORTBbits.RB1 = 1;
  2499  0013EC  8281               	bsf	129,1,c	;volatile
  2500  0013EE                     
  2501                           ;main.c: 106:      PORTD = data;
  2502  0013EE  C002  FF83         	movff	LCD_DATA@data,3971	;volatile
  2503  0013F2                     
  2504                           ;main.c: 107:     PORTBbits.RB0 = 0;
  2505  0013F2  9081               	bcf	129,0,c	;volatile
  2506  0013F4                     
  2507                           ;main.c: 108:     _delay((unsigned long)((5)*(8000000/4000.0)));
  2508  0013F4  0E0D               	movlw	13
  2509  0013F6  6E01               	movwf	??_LCD_DATA^0,c
  2510  0013F8  0EFC               	movlw	252
  2511  0013FA                     u1057:
  2512  0013FA  2EE8               	decfsz	wreg,f,c
  2513  0013FC  D7FE               	bra	u1057
  2514  0013FE  2E01               	decfsz	??_LCD_DATA^0,f,c
  2515  001400  D7FC               	bra	u1057
  2516  001402  0012               	return		;funcret
  2517  001404                     __end_of_LCD_DATA:
  2518                           	callstack 0
  2519                           
  2520 ;; *************** function _LCD_INT *****************
  2521 ;; Defined at:
  2522 ;;		line 81 in file "main.c"
  2523 ;; Parameters:    Size  Location     Type
  2524 ;;		None
  2525 ;; Auto vars:     Size  Location     Type
  2526 ;;		None
  2527 ;; Return value:  Size  Location     Type
  2528 ;;                  1    wreg      void 
  2529 ;; Registers used:
  2530 ;;		wreg, status,2, cstack
  2531 ;; Tracked objects:
  2532 ;;		On entry : 0/0
  2533 ;;		On exit  : 0/0
  2534 ;;		Unchanged: 0/0
  2535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2536 ;;      Params:         0       0       0       0       0       0       0       0       0
  2537 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2538 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2539 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2540 ;;Total ram usage:        0 bytes
  2541 ;; Hardware stack levels used: 1
  2542 ;; Hardware stack levels required when called: 1
  2543 ;; This function calls:
  2544 ;;		_LCD_INST
  2545 ;; This function is called by:
  2546 ;;		_main
  2547 ;; This function uses a non-reentrant model
  2548 ;;
  2549                           
  2550                           	psect	text15
  2551  001450                     __ptext15:
  2552                           	callstack 0
  2553  001450                     _LCD_INT:
  2554                           	callstack 29
  2555  001450                     
  2556                           ;main.c: 82:     TRISD = 0;
  2557  001450  0E00               	movlw	0
  2558  001452  6E95               	movwf	149,c	;volatile
  2559  001454                     
  2560                           ;main.c: 83:     TRISBbits.RB0 = 0;
  2561  001454  9093               	bcf	147,0,c	;volatile
  2562  001456                     
  2563                           ;main.c: 84:     TRISBbits.RB1 = 0;
  2564  001456  9293               	bcf	147,1,c	;volatile
  2565  001458                     
  2566                           ;main.c: 87:     LCD_INST(0b00111100);
  2567  001458  0E3C               	movlw	60
  2568  00145A  EC02  F00A         	call	_LCD_INST
  2569  00145E                     
  2570                           ;main.c: 88:     LCD_INST(0b00000110);
  2571  00145E  0E06               	movlw	6
  2572  001460  EC02  F00A         	call	_LCD_INST
  2573  001464                     
  2574                           ;main.c: 89:     LCD_INST(0b00001111);
  2575  001464  0E0F               	movlw	15
  2576  001466  EC02  F00A         	call	_LCD_INST
  2577  00146A  0012               	return		;funcret
  2578  00146C                     __end_of_LCD_INT:
  2579                           	callstack 0
  2580                           
  2581 ;; *************** function _LCD_CURSOR *****************
  2582 ;; Defined at:
  2583 ;;		line 64 in file "main.c"
  2584 ;; Parameters:    Size  Location     Type
  2585 ;;  col             1    wreg     unsigned char 
  2586 ;;  line            1    2[COMRAM] unsigned char 
  2587 ;; Auto vars:     Size  Location     Type
  2588 ;;  col             1    3[COMRAM] unsigned char 
  2589 ;; Return value:  Size  Location     Type
  2590 ;;                  1    wreg      void 
  2591 ;; Registers used:
  2592 ;;		wreg, status,2, status,0, cstack
  2593 ;; Tracked objects:
  2594 ;;		On entry : 0/0
  2595 ;;		On exit  : 0/0
  2596 ;;		Unchanged: 0/0
  2597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2598 ;;      Params:         1       0       0       0       0       0       0       0       0
  2599 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2600 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2601 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2602 ;;Total ram usage:        2 bytes
  2603 ;; Hardware stack levels used: 1
  2604 ;; Hardware stack levels required when called: 1
  2605 ;; This function calls:
  2606 ;;		_LCD_INST
  2607 ;; This function is called by:
  2608 ;;		_main
  2609 ;; This function uses a non-reentrant model
  2610 ;;
  2611                           
  2612                           	psect	text16
  2613  001338                     __ptext16:
  2614                           	callstack 0
  2615  001338                     _LCD_CURSOR:
  2616                           	callstack 29
  2617                           
  2618                           ;incstack = 0
  2619                           ;LCD_CURSOR@col stored from wreg
  2620  001338  6E04               	movwf	LCD_CURSOR@col^0,c
  2621  00133A                     
  2622                           ;main.c: 65:     if (line == 1)
  2623  00133A  0403               	decf	LCD_CURSOR@line^0,w,c
  2624  00133C  A4D8               	btfss	status,2,c
  2625  00133E  EFA3  F009         	goto	u991
  2626  001342  EFA5  F009         	goto	u990
  2627  001346                     u991:
  2628  001346  EFAB  F009         	goto	l1517
  2629  00134A                     u990:
  2630  00134A                     
  2631                           ;main.c: 66:     {;main.c: 67:         LCD_INST(0b10000000 | col);
  2632  00134A  5004               	movf	LCD_CURSOR@col^0,w,c
  2633  00134C  0980               	iorlw	128
  2634  00134E  EC02  F00A         	call	_LCD_INST
  2635                           
  2636                           ;main.c: 68:     }
  2637  001352  EFB8  F009         	goto	l63
  2638  001356                     l1517:
  2639  001356  0E02               	movlw	2
  2640  001358  1803               	xorwf	LCD_CURSOR@line^0,w,c
  2641  00135A  A4D8               	btfss	status,2,c
  2642  00135C  EFB2  F009         	goto	u1001
  2643  001360  EFB4  F009         	goto	u1000
  2644  001364                     u1001:
  2645  001364  EFB8  F009         	goto	l63
  2646  001368                     u1000:
  2647  001368                     
  2648                           ;main.c: 70:     {;main.c: 71:         LCD_INST(0b11000000 | col);
  2649  001368  5004               	movf	LCD_CURSOR@col^0,w,c
  2650  00136A  09C0               	iorlw	192
  2651  00136C  EC02  F00A         	call	_LCD_INST
  2652  001370                     l63:
  2653  001370  0012               	return		;funcret
  2654  001372                     __end_of_LCD_CURSOR:
  2655                           	callstack 0
  2656                           
  2657 ;; *************** function _LCD_INST *****************
  2658 ;; Defined at:
  2659 ;;		line 93 in file "main.c"
  2660 ;; Parameters:    Size  Location     Type
  2661 ;;  cmd             1    wreg     unsigned char 
  2662 ;; Auto vars:     Size  Location     Type
  2663 ;;  cmd             1    1[COMRAM] unsigned char 
  2664 ;; Return value:  Size  Location     Type
  2665 ;;                  1    wreg      void 
  2666 ;; Registers used:
  2667 ;;		wreg
  2668 ;; Tracked objects:
  2669 ;;		On entry : 0/0
  2670 ;;		On exit  : 0/0
  2671 ;;		Unchanged: 0/0
  2672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2673 ;;      Params:         0       0       0       0       0       0       0       0       0
  2674 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2675 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2676 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2677 ;;Total ram usage:        2 bytes
  2678 ;; Hardware stack levels used: 1
  2679 ;; This function calls:
  2680 ;;		Nothing
  2681 ;; This function is called by:
  2682 ;;		_LCD_CURSOR
  2683 ;;		_LCD_INT
  2684 ;; This function uses a non-reentrant model
  2685 ;;
  2686                           
  2687                           	psect	text17
  2688  001404                     __ptext17:
  2689                           	callstack 0
  2690  001404                     _LCD_INST:
  2691                           	callstack 29
  2692                           
  2693                           ;incstack = 0
  2694                           ;LCD_INST@cmd stored from wreg
  2695  001404  6E02               	movwf	LCD_INST@cmd^0,c
  2696  001406                     
  2697                           ;main.c: 94:     PORTBbits.RB1 = 0;
  2698  001406  9281               	bcf	129,1,c	;volatile
  2699                           
  2700                           ;main.c: 95:     PORTBbits.RB0 = 1;
  2701  001408  8081               	bsf	129,0,c	;volatile
  2702  00140A                     
  2703                           ;main.c: 96:     _delay((unsigned long)((1)*(8000000/4000.0)));
  2704  00140A  0E03               	movlw	3
  2705  00140C  6E01               	movwf	??_LCD_INST^0,c
  2706  00140E  0E98               	movlw	152
  2707  001410                     u1067:
  2708  001410  2EE8               	decfsz	wreg,f,c
  2709  001412  D7FE               	bra	u1067
  2710  001414  2E01               	decfsz	??_LCD_INST^0,f,c
  2711  001416  D7FC               	bra	u1067
  2712  001418                     
  2713                           ;main.c: 97:      PORTD = cmd;
  2714  001418  C002  FF83         	movff	LCD_INST@cmd,3971	;volatile
  2715  00141C                     
  2716                           ;main.c: 98:     PORTBbits.RB0 = 0;
  2717  00141C  9081               	bcf	129,0,c	;volatile
  2718  00141E                     
  2719                           ;main.c: 99:     _delay((unsigned long)((5)*(8000000/4000.0)));
  2720  00141E  0E0D               	movlw	13
  2721  001420  6E01               	movwf	??_LCD_INST^0,c
  2722  001422  0EFC               	movlw	252
  2723  001424                     u1077:
  2724  001424  2EE8               	decfsz	wreg,f,c
  2725  001426  D7FE               	bra	u1077
  2726  001428  2E01               	decfsz	??_LCD_INST^0,f,c
  2727  00142A  D7FC               	bra	u1077
  2728  00142C  0012               	return		;funcret
  2729  00142E                     __end_of_LCD_INST:
  2730                           	callstack 0
  2731                           
  2732 ;; *************** function _ADC_READ *****************
  2733 ;; Defined at:
  2734 ;;		line 54 in file "main.c"
  2735 ;; Parameters:    Size  Location     Type
  2736 ;;		None
  2737 ;; Auto vars:     Size  Location     Type
  2738 ;;  result          2    4[COMRAM] unsigned short 
  2739 ;; Return value:  Size  Location     Type
  2740 ;;                  2    0[COMRAM] unsigned short 
  2741 ;; Registers used:
  2742 ;;		wreg, status,2
  2743 ;; Tracked objects:
  2744 ;;		On entry : 0/0
  2745 ;;		On exit  : 0/0
  2746 ;;		Unchanged: 0/0
  2747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2748 ;;      Params:         2       0       0       0       0       0       0       0       0
  2749 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2750 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2751 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2752 ;;Total ram usage:        6 bytes
  2753 ;; Hardware stack levels used: 1
  2754 ;; This function calls:
  2755 ;;		Nothing
  2756 ;; This function is called by:
  2757 ;;		_main
  2758 ;; This function uses a non-reentrant model
  2759 ;;
  2760                           
  2761                           	psect	text18
  2762  0013A8                     __ptext18:
  2763                           	callstack 0
  2764  0013A8                     _ADC_READ:
  2765                           	callstack 30
  2766  0013A8                     
  2767                           ;main.c: 56:     ADCON0bits.ADON = 1;
  2768  0013A8  80C2               	bsf	194,0,c	;volatile
  2769                           
  2770                           ;main.c: 57:     ADCON0bits.GO = 1;
  2771  0013AA  82C2               	bsf	194,1,c	;volatile
  2772  0013AC                     l54:
  2773  0013AC  B2C2               	btfsc	194,1,c	;volatile
  2774  0013AE  EFDB  F009         	goto	u1011
  2775  0013B2  EFDD  F009         	goto	u1010
  2776  0013B6                     u1011:
  2777  0013B6  EFD6  F009         	goto	l54
  2778  0013BA                     u1010:
  2779  0013BA                     
  2780                           ;main.c: 59:     unsigned short result = 0;
  2781  0013BA  0E00               	movlw	0
  2782  0013BC  6E06               	movwf	(ADC_READ@result+1)^0,c
  2783  0013BE  0E00               	movlw	0
  2784  0013C0  6E05               	movwf	ADC_READ@result^0,c
  2785                           
  2786                           ;main.c: 60:     result = (unsigned short)(ADRESH<<8)|(unsigned short) ADRESL;
  2787  0013C2  50C4               	movf	196,w,c	;volatile
  2788  0013C4  6E03               	movwf	??_ADC_READ^0,c
  2789  0013C6  50C3               	movf	195,w,c	;volatile
  2790  0013C8  6E05               	movwf	ADC_READ@result^0,c
  2791  0013CA  C003  F006         	movff	??_ADC_READ,ADC_READ@result+1
  2792  0013CE                     
  2793                           ;main.c: 61:     ADCON0bits.ADON = 0;
  2794  0013CE  90C2               	bcf	194,0,c	;volatile
  2795  0013D0                     
  2796                           ;main.c: 62:     return result;
  2797  0013D0  C005  F001         	movff	ADC_READ@result,?_ADC_READ
  2798  0013D4  C006  F002         	movff	ADC_READ@result+1,?_ADC_READ+1
  2799  0013D8  0012               	return		;funcret
  2800  0013DA                     __end_of_ADC_READ:
  2801                           	callstack 0
  2802                           
  2803 ;; *************** function _ADC_INT *****************
  2804 ;; Defined at:
  2805 ;;		line 45 in file "main.c"
  2806 ;; Parameters:    Size  Location     Type
  2807 ;;		None
  2808 ;; Auto vars:     Size  Location     Type
  2809 ;;		None
  2810 ;; Return value:  Size  Location     Type
  2811 ;;                  1    wreg      void 
  2812 ;; Registers used:
  2813 ;;		wreg, status,2
  2814 ;; Tracked objects:
  2815 ;;		On entry : 0/0
  2816 ;;		On exit  : 0/0
  2817 ;;		Unchanged: 0/0
  2818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2819 ;;      Params:         0       0       0       0       0       0       0       0       0
  2820 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2821 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2822 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2823 ;;Total ram usage:        0 bytes
  2824 ;; Hardware stack levels used: 1
  2825 ;; This function calls:
  2826 ;;		Nothing
  2827 ;; This function is called by:
  2828 ;;		_main
  2829 ;; This function uses a non-reentrant model
  2830 ;;
  2831                           
  2832                           	psect	text19
  2833  00142E                     __ptext19:
  2834                           	callstack 0
  2835  00142E                     _ADC_INT:
  2836                           	callstack 30
  2837  00142E                     
  2838                           ;main.c: 47:     TRISAbits.RA0 = 1;
  2839  00142E  8092               	bsf	146,0,c	;volatile
  2840  001430                     
  2841                           ;main.c: 48:     ADCON0bits.CHS = 0;
  2842  001430  0EC3               	movlw	-61
  2843  001432  16C2               	andwf	194,f,c	;volatile
  2844                           
  2845                           ;main.c: 49:     ADCON1bits.PCFG = 0b1110;
  2846  001434  50C1               	movf	193,w,c	;volatile
  2847  001436  0BF0               	andlw	-16
  2848  001438  090E               	iorlw	14
  2849  00143A  6EC1               	movwf	193,c	;volatile
  2850                           
  2851                           ;main.c: 50:     ADCON2bits.ACQT = 0b010;
  2852  00143C  50C0               	movf	192,w,c	;volatile
  2853  00143E  0BC7               	andlw	-57
  2854  001440  0910               	iorlw	16
  2855  001442  6EC0               	movwf	192,c	;volatile
  2856                           
  2857                           ;main.c: 51:     ADCON2bits.ADCS = 0b100;
  2858  001444  50C0               	movf	192,w,c	;volatile
  2859  001446  0BF8               	andlw	-8
  2860  001448  0904               	iorlw	4
  2861  00144A  6EC0               	movwf	192,c	;volatile
  2862  00144C                     
  2863                           ;main.c: 52:     ADCON2bits.ADFM = 0;
  2864  00144C  9EC0               	bcf	192,7,c	;volatile
  2865  00144E  0012               	return		;funcret
  2866  001450                     __end_of_ADC_INT:
  2867                           	callstack 0
  2868                           
  2869                           	psect	rparam
  2870  0000                     
  2871                           	psect	idloc
  2872                           
  2873                           ;Config register IDLOC0 @ 0x200000
  2874                           ;	unspecified, using default values
  2875  200000                     	org	2097152
  2876  200000  FF                 	db	255
  2877                           
  2878                           ;Config register IDLOC1 @ 0x200001
  2879                           ;	unspecified, using default values
  2880  200001                     	org	2097153
  2881  200001  FF                 	db	255
  2882                           
  2883                           ;Config register IDLOC2 @ 0x200002
  2884                           ;	unspecified, using default values
  2885  200002                     	org	2097154
  2886  200002  FF                 	db	255
  2887                           
  2888                           ;Config register IDLOC3 @ 0x200003
  2889                           ;	unspecified, using default values
  2890  200003                     	org	2097155
  2891  200003  FF                 	db	255
  2892                           
  2893                           ;Config register IDLOC4 @ 0x200004
  2894                           ;	unspecified, using default values
  2895  200004                     	org	2097156
  2896  200004  FF                 	db	255
  2897                           
  2898                           ;Config register IDLOC5 @ 0x200005
  2899                           ;	unspecified, using default values
  2900  200005                     	org	2097157
  2901  200005  FF                 	db	255
  2902                           
  2903                           ;Config register IDLOC6 @ 0x200006
  2904                           ;	unspecified, using default values
  2905  200006                     	org	2097158
  2906  200006  FF                 	db	255
  2907                           
  2908                           ;Config register IDLOC7 @ 0x200007
  2909                           ;	unspecified, using default values
  2910  200007                     	org	2097159
  2911  200007  FF                 	db	255
  2912                           
  2913                           	psect	config
  2914                           
  2915                           ;Config register CONFIG1L @ 0x300000
  2916                           ;	PLL Prescaler Selection bits
  2917                           ;	PLLDIV = 3, Divide by 3 (12 MHz oscillator input)
  2918                           ;	System Clock Postscaler Selection bits
  2919                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  2920                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  2921                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
  2922  300000                     	org	3145728
  2923  300000  02                 	db	2
  2924                           
  2925                           ;Config register CONFIG1H @ 0x300001
  2926                           ;	Oscillator Selection bits
  2927                           ;	FOSC = HS, HS oscillator (HS)
  2928                           ;	Fail-Safe Clock Monitor Enable bit
  2929                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2930                           ;	Internal/External Oscillator Switchover bit
  2931                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2932  300001                     	org	3145729
  2933  300001  0C                 	db	12
  2934                           
  2935                           ;Config register CONFIG2L @ 0x300002
  2936                           ;	Power-up Timer Enable bit
  2937                           ;	PWRT = OFF, PWRT disabled
  2938                           ;	Brown-out Reset Enable bits
  2939                           ;	BOR = ON, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  2940                           ;	Brown-out Reset Voltage bits
  2941                           ;	BORV = 3, Minimum setting 2.05V
  2942                           ;	USB Voltage Regulator Enable bit
  2943                           ;	VREGEN = OFF, USB voltage regulator disabled
  2944  300002                     	org	3145730
  2945  300002  1F                 	db	31
  2946                           
  2947                           ;Config register CONFIG2H @ 0x300003
  2948                           ;	Watchdog Timer Enable bit
  2949                           ;	WDT = ON, WDT enabled
  2950                           ;	Watchdog Timer Postscale Select bits
  2951                           ;	WDTPS = 32768, 1:32768
  2952  300003                     	org	3145731
  2953  300003  1F                 	db	31
  2954                           
  2955                           ; Padding undefined space
  2956  300004                     	org	3145732
  2957  300004  FF                 	db	255
  2958                           
  2959                           ;Config register CONFIG3H @ 0x300005
  2960                           ;	CCP2 MUX bit
  2961                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  2962                           ;	PORTB A/D Enable bit
  2963                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
  2964                           ;	Low-Power Timer 1 Oscillator Enable bit
  2965                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  2966                           ;	MCLR Pin Enable bit
  2967                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  2968  300005                     	org	3145733
  2969  300005  83                 	db	131
  2970                           
  2971                           ;Config register CONFIG4L @ 0x300006
  2972                           ;	Stack Full/Underflow Reset Enable bit
  2973                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2974                           ;	Single-Supply ICSP Enable bit
  2975                           ;	LVP = ON, Single-Supply ICSP enabled
  2976                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  2977                           ;	ICPRT = OFF, ICPORT disabled
  2978                           ;	Extended Instruction Set Enable bit
  2979                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  2980                           ;	Background Debugger Enable bit
  2981                           ;	DEBUG = 0x1, unprogrammed default
  2982  300006                     	org	3145734
  2983  300006  85                 	db	133
  2984                           
  2985                           ; Padding undefined space
  2986  300007                     	org	3145735
  2987  300007  FF                 	db	255
  2988                           
  2989                           ;Config register CONFIG5L @ 0x300008
  2990                           ;	Code Protection bit
  2991                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  2992                           ;	Code Protection bit
  2993                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  2994                           ;	Code Protection bit
  2995                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  2996                           ;	Code Protection bit
  2997                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  2998  300008                     	org	3145736
  2999  300008  0F                 	db	15
  3000                           
  3001                           ;Config register CONFIG5H @ 0x300009
  3002                           ;	Boot Block Code Protection bit
  3003                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  3004                           ;	Data EEPROM Code Protection bit
  3005                           ;	CPD = OFF, Data EEPROM is not code-protected
  3006  300009                     	org	3145737
  3007  300009  C0                 	db	192
  3008                           
  3009                           ;Config register CONFIG6L @ 0x30000A
  3010                           ;	Write Protection bit
  3011                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  3012                           ;	Write Protection bit
  3013                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  3014                           ;	Write Protection bit
  3015                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  3016                           ;	Write Protection bit
  3017                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  3018  30000A                     	org	3145738
  3019  30000A  0F                 	db	15
  3020                           
  3021                           ;Config register CONFIG6H @ 0x30000B
  3022                           ;	Configuration Register Write Protection bit
  3023                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  3024                           ;	Boot Block Write Protection bit
  3025                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  3026                           ;	Data EEPROM Write Protection bit
  3027                           ;	WRTD = OFF, Data EEPROM is not write-protected
  3028  30000B                     	org	3145739
  3029  30000B  E0                 	db	224
  3030                           
  3031                           ;Config register CONFIG7L @ 0x30000C
  3032                           ;	Table Read Protection bit
  3033                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3034                           ;	Table Read Protection bit
  3035                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3036                           ;	Table Read Protection bit
  3037                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3038                           ;	Table Read Protection bit
  3039                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3040  30000C                     	org	3145740
  3041  30000C  0F                 	db	15
  3042                           
  3043                           ;Config register CONFIG7H @ 0x30000D
  3044                           ;	Boot Block Table Read Protection bit
  3045                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  3046  30000D                     	org	3145741
  3047  30000D  40                 	db	64
  3048                           tosu	equ	0xFFF
  3049                           tosh	equ	0xFFE
  3050                           tosl	equ	0xFFD
  3051                           stkptr	equ	0xFFC
  3052                           pclatu	equ	0xFFB
  3053                           pclath	equ	0xFFA
  3054                           pcl	equ	0xFF9
  3055                           tblptru	equ	0xFF8
  3056                           tblptrh	equ	0xFF7
  3057                           tblptrl	equ	0xFF6
  3058                           tablat	equ	0xFF5
  3059                           prodh	equ	0xFF4
  3060                           prodl	equ	0xFF3
  3061                           indf0	equ	0xFEF
  3062                           postinc0	equ	0xFEE
  3063                           postdec0	equ	0xFED
  3064                           preinc0	equ	0xFEC
  3065                           plusw0	equ	0xFEB
  3066                           fsr0h	equ	0xFEA
  3067                           fsr0l	equ	0xFE9
  3068                           wreg	equ	0xFE8
  3069                           indf1	equ	0xFE7
  3070                           postinc1	equ	0xFE6
  3071                           postdec1	equ	0xFE5
  3072                           preinc1	equ	0xFE4
  3073                           plusw1	equ	0xFE3
  3074                           fsr1h	equ	0xFE2
  3075                           fsr1l	equ	0xFE1
  3076                           bsr	equ	0xFE0
  3077                           indf2	equ	0xFDF
  3078                           postinc2	equ	0xFDE
  3079                           postdec2	equ	0xFDD
  3080                           preinc2	equ	0xFDC
  3081                           plusw2	equ	0xFDB
  3082                           fsr2h	equ	0xFDA
  3083                           fsr2l	equ	0xFD9
  3084                           status	equ	0xFD8

Data Sizes:
    Strings     18
    Constant    0
    Data        0
    BSS         55
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     25      80
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 15
		 -> main@buf(BANK0[15]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 15
		 -> main@buf(BANK0[15]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S821_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 15
		 -> main@buf(BANK0[15]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 15
		 -> main@buf(BANK0[15]), 

    LCD_TEXT@text	PTR unsigned char  size(2) Largest target is 15
		 -> STR_1(CODE[9]), main@buf(BANK0[15]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _LCD_TEXT->_LCD_DATA
    _LCD_INT->_LCD_INST
    _LCD_CURSOR->_LCD_INST

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                19    19      0    6982
                                             93 COMRAM     2     2      0
                                              8 BANK0     17    17      0
                            _ADC_INT
                           _ADC_READ
                         _LCD_CURSOR
                            _LCD_INT
                           _LCD_TEXT
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    6456
                                             87 COMRAM     6     0      6
                                              0 BANK0      8     8      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    6105
                                             79 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           42    36      6    5751
                                             63 COMRAM    16    10      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    4358
                                             27 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _LCD_TEXT                                             2     0      2     219
                                              2 COMRAM     2     0      2
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (2) _LCD_DATA                                             2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD_INT                                              0     0      0      22
                           _LCD_INST
 ---------------------------------------------------------------------------------
 (1) _LCD_CURSOR                                           2     1      1     186
                                              2 COMRAM     2     1      1
                           _LCD_INST
 ---------------------------------------------------------------------------------
 (2) _LCD_INST                                             2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ADC_READ                                             6     4      2      24
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _ADC_INT                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_INT
   _ADC_READ
   _LCD_CURSOR
     _LCD_INST
   _LCD_INT
     _LCD_INST
   _LCD_TEXT
     _LCD_DATA
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
             _strlen
         _fputc

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     19      50       5       50.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AF      20        0.0%
DATA                 0      0      AF       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Tue Sep 05 22:11:00 2023

            LCD_INST@cmd 0002                       l51 144E                       l54 13AC  
                     l63 1370                       l72 146A                       l57 13D8  
                     l75 142C                       l69 1260                       l78 1402  
          LCD_CURSOR@col 0004                      l208 0F94                      l195 0E30  
                    l830 11FA                      l831 1202                      l824 0CA8  
                    l817 0AF4                      l850 105E                      l835 132E  
                    l861 1482                      l838 1336                      l791 1124  
                    l759 12B2                      l858 12F6                      l786 10A6  
                    l867 13A6                      l789 10E8                      l797 08B4  
                    l799 08BC                      u520 0FA8                      u601 0D18  
                    u521 0FA4                      u610 0D3C                      u530 0FBA  
                    u611 0D38                      u531 0FB6                      u620 0D66  
                    u700 0F54                      u540 0FE2                      u621 0D62  
                    u701 0F50                      u541 0FDE                      u630 0DA6  
                    u550 1018                      u710 1070                      u631 0DA2  
                    u551 1014                      u711 106C                      u640 0DF0  
                    u560 12F6                      u720 1092                      u800 08A8  
                    u641 0DEC                      u561 12F2                      u721 108E  
                    u801 08A4                      u650 0E44                      u570 139A  
                    u730 10E8                      u810 08D6                      u651 0E40  
                    u571 1396                      u731 10E4                      u811 08D2  
                    u580 0CBC                      u660 0E76                      u740 10F8  
                    u900 0AA8                      u820 08E4                      u581 0CB8  
                    u661 0E72                      u741 10F4                      u901 0AA4  
                    u821 08E0                      u590 0CEE                      u670 0EB4  
                    u750 1312                      u830 0A0C                      u910 0B1A  
                    u591 0CEA                      u671 0EB0                      u751 130E  
                    u831 0A08                      u911 0B16                      u680 0EDE  
                    u840 0A2A                      u760 0844                      u920 0B62  
                    u681 0EDA                      u841 0A26                      u761 083E  
                    u921 0B5E                      u690 0F0C                      u850 0A44  
                    u770 0846                      u930 0B86                      u691 0F08  
                    u851 0A40                      u931 0B82                      u860 0A5E  
                    u780 085C                      u940 0C2A                      u861 0A5A  
                    u781 0858                      u941 0C26                      u870 0A6E  
                    u790 088C                      u950 11FA                      u871 0A6A  
                    u791 0888                      u951 11F6                      u960 1228  
                    u880 0A80                      u881 0A7C                      u970 1250  
                    u890 0A90                      u891 0A8C                      u980 1260  
                    u981 125C                      u990 134A                      u991 1346  
                    u967 121E                      u977 1246                      _abs 12F8  
         LCD_CURSOR@line 0003                      _pad 1060          __end_of_ADC_INT 1450  
                    wreg 000FE8          __end_of_LCD_INT 146C                     ?_abs 0013  
                   l1301 0E76                     l1221 0FC4                     l1311 0EDE  
                   l1303 0E96                     l1223 0FE2                     l1215 0F96  
                   l1231 12C0                     l1321 0F54                     l1313 0F0C  
                   l1305 0EB4                     l1225 1018                     l1217 0FA8  
                   l1233 12D2                     l1241 1382                     l1401 0A90  
                   l1251 0CBC                     l1323 0F74                     l1315 0F2C  
                   l1307 0EBC                     l1219 0FBA                     l1235 12D6  
                   l1243 139A                     l1331 1084                     l1403 0A96  
                   l1411 0ACC                     l1501 1430                     l1261 0D12  
                   l1253 0CDC                     l1317 0F3E                     l1309 0ED0  
                   l1229 12B4                     l1237 1372                     l1341 10CA  
                   l1333 1092                     l1405 0AA8                     l1421 0B3A  
                   l1503 144C                     l1511 1230                     l1271 0D66  
                   l1263 0D1E                     l1255 0CE0                     l1247 0CAA  
                   l1319 0F44                     l1351 1312                     l1239 137E  
                   l1343 10F8                     l1335 109E                     l1327 1060  
                   l1407 0AB4                     l1423 0B3E                     l1415 0AF6  
                   l1521 13A8                     l1513 133A                     l1505 1204  
                   l1281 0DDA                     l1273 0D78                     l1265 0D3C  
                   l1257 0CEE                     l1249 0CAE                     l1345 110C  
                   l1337 10B2                     l1329 1070                     l1409 0ABC  
                   l1361 088C                     l1353 0814                     l1433 0C06  
                   l1425 0B62                     l1417 0B1A                     l1523 13BA  
                   l1515 134A                     l1507 1208                     l1275 0DA6  
                   l1267 0D44                     l1283 0DE0                     l1259 0D0E  
                   l1291 0E32                     l1339 10C6                     l1371 08E4  
                   l1363 088E                     l1355 0834                     l1451 0C96  
                   l1435 0C2A                     l1443 0C58                     l1427 0B86  
                   l1419 0B28                     l1531 1262                     l1525 13CE  
                   l1461 1418                     l1517 1356                     l1509 122C  
                   l1285 0DF0                     l1277 0DC6                     l1269 0D58  
                   l1293 0E36                     l1349 12F8                     l1381 0982  
                   l1373 08EA                     l1365 08A8                     l1357 085C  
                   l1445 0C66                     l1437 0C38                     l1429 0BCE  
                   l1533 1274                     l1527 13D0                     l1463 141C  
                   l1519 1368                     l1471 13EC                     l1287 0E10  
                   l1279 0DC8                     l1295 0E44                     l1391 0A2A  
                   l1383 0988                     l1375 08F2                     l1367 08C4  
                   l1359 087C                     l1439 0C4C                     l1535 127C  
                   l1551 113A                     l1543 1126                     l1465 141E  
                   l1457 1406                     l1473 13EE                     l1297 0E64  
                   l1393 0A44                     l1385 098E                     l1377 08FA  
                   l1369 08D6                     l1449 0C72                     l1481 11AA  
                   l1537 1284                     l1553 1146                     l1545 1126  
                   l1459 140A                     l1491 1456                     l1475 13F2  
                   l1467 13DC                     l1299 0E68                     l1395 0A5E  
                   l1379 0900                     l1387 09F2                     l1483 11B8  
                   l1539 12A0                     l1555 1150                     l1547 1132  
                   l1493 1458                     l1477 13F4                     l1469 13DE  
                   l1389 0A0C                     l1397 0A6E                     l1485 11DE  
                   l1557 1178                     l1549 1136                     l1495 145E  
                   l1487 1450                     l1399 0A80                     l1479 11A2  
                   l1559 1184                     l1497 1464                     l1489 1454  
                   l1499 142E                     ?_pad 0011                     STR_1 0801  
                   STR_2 080A                     u1000 1368                     u1001 1364  
                   u1010 13BA                     u1011 13B6                     u1021 112C  
                   u1037 118E                     u1047 13E4                     u1057 13FA  
                   u1067 1410                     u1077 1424                     abs@a 0013  
                   _dbuf 0077         __end_of_ADC_READ 13DA                     _main 1126  
                   _dtoa 0814                     _prec 0073                     _nout 006F  
                   pad@i 0018                     pad@p 0015                     fsr1h 000FE2  
                   fsr2h 000FDA                     indf1 000FE7                     indf2 000FDF  
                   fsr1l 000FE1                     pad@w 001A                     fsr2l 000FD9  
           LCD_TEXT@text 0003                     start 0000             ___param_bank 000000  
       __end_of_LCD_DATA 1404         __end_of_LCD_INST 142E                    ??_abs 0015  
                  ??_pad 0017         __end_of_LCD_TEXT 1262          __end_of___aodiv 0E32  
                  ?_main 0001                    ?_dtoa 001C          __end_of___aomod 0F96  
           vfpfcnvrt@fmt 0042                    _PORTD 000F83                    _TRISD 000F95  
    __size_of_LCD_CURSOR 003A                    _flags 0075                    _fputc 0F96  
                  _fputs 12B4                    pad@fp 0011                    _width 0071  
                  _putch 1482                    dtoa@d 001E                    dtoa@i 003E  
                  dtoa@n 0036                    dtoa@p 0030                    dtoa@s 0034  
                  dtoa@w 0032                    tablat 000FF5                    status 000FD8  
        __end_of_sprintf 12B4          __initialization 146C             __end_of_main 11A2  
           __end_of_dtoa 0AF6           ADC_READ@result 0005                ??_ADC_INT 0001  
                 ??_main 005E                   ??_dtoa 0026            __activetblptr 000002  
              ??_LCD_INT 0003                   ?_fputc 0001                   ?_fputs 000A  
                 _ADRESH 000FC4                   _ADRESL 000FC3                   ?_putch 0001  
           vfprintf@cfmt 0056                ??___aodiv 0011                ??___aomod 0011  
                 clear_0 1472                   isa$std 000001                   pad@buf 0013  
                 dtoa@fp 001C                   _strlen 1372                   fputc@c 0001  
              ?_ADC_READ 0001                   fputs@c 000E                   fputs@i 000F  
                 fputs@s 000A             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                   putch@c 0001  
       __end_of_vfprintf 1204                ??_sprintf 005E                ?_LCD_DATA 0001  
              ?_LCD_INST 0001                ?_LCD_TEXT 0003               __accesstop 0060  
__end_of__initialization 1478             ??_LCD_CURSOR 0004            ___rparam_used 000001  
         __pcstackCOMRAM 0001            __end_of_fputc 1060            __end_of_fputs 12F8  
          __end_of_putch 1484               ??_ADC_READ 0003       __end_of_LCD_CURSOR 1372  
                ??_fputc 0005                  ??_fputs 000E                  ??_putch 0001  
             __pbssBANK0 0060               ??_LCD_DATA 0001               ??_LCD_INST 0001  
             ??_LCD_TEXT 0005                  _ADC_INT 142E                  ?_strlen 0001  
                _LCD_INT 1450       __size_of_vfpfcnvrt 01B4                  __Hparam 0000  
                __Lparam 0000                  ___aodiv 0CAA                  ___aomod 0E32  
              ?_vfprintf 0050             __psmallconst 0800                  __pcinit 146C  
                __ramtop 0800                  __ptext0 1126                  __ptext1 1262  
                __ptext2 11A2                  __ptext3 0AF6                  __ptext4 0814  
                __ptext5 1060                  __ptext6 1372                  __ptext7 12B4  
                __ptext8 0F96                  __ptext9 1482          __size_of_strlen 0036  
           __size_of_abs 0040             __size_of_pad 00C6                  main@buf 009F  
                _sprintf 1262     end_of_initialization 1478                  fputc@fp 0003  
          __Lmediumconst 0000                  fputs@fp 000C        __end_of_vfpfcnvrt 0CAA  
                postdec2 000FDD                  postinc0 000FEE                  postinc1 000FE6  
                postinc2 000FDE               ??_vfprintf 0056                  strlen@a 0003  
                strlen@s 0001                _PORTBbits 000F81                _TRISAbits 000F92  
              _TRISBbits 000F93        __size_of_ADC_READ 0032        __size_of_LCD_DATA 002A  
      __size_of_LCD_INST 002A        __size_of_LCD_TEXT 005E               main@result 00AE  
            vfpfcnvrt@ap 0044              vfpfcnvrt@fp 0040              vfpfcnvrt@ll 0048  
         __end_of_strlen 13A8      start_initialization 146C              __end_of_abs 1338  
            __end_of_pad 1126              vfprintf@fmt 0052                 ?_ADC_INT 0001  
               ??_strlen 0003                 ?_LCD_INT 0001            __pcstackBANK0 0097  
       ___aodiv@dividend 0001                 ?___aodiv 0001                 ?___aomod 0001  
       ___aodiv@quotient 0013        __size_of_vfprintf 0062              __smallconst 0800  
               _ADC_READ 13A8                 ?_sprintf 0058           __size_of_fputc 00CA  
         __size_of_fputs 0044           __size_of_putch 0002                 _LCD_DATA 13DA  
               _LCD_INST 1404                 _LCD_TEXT 1204                main@F3524 0060  
              _vfpfcnvrt 0AF6         __size_of_ADC_INT 0022               _ADCON0bits 000FC2  
             _ADCON1bits 000FC1               _ADCON2bits 000FC0         __size_of_LCD_INT 001C  
               __Hrparam 0000               vfprintf@ap 0054                 __Lrparam 0000  
             vfprintf@fp 0050         __size_of___aodiv 0188         __size_of___aomod 0164  
             ?_vfpfcnvrt 0040          ___aodiv@divisor 0009          ___aodiv@counter 0011  
             sprintf@fmt 005A                 _dtoa$894 002E                 __ptext10 12F8  
               __ptext11 0E32                 __ptext12 0CAA                 __ptext13 1204  
               __ptext14 13DA                 __ptext15 1450                 __ptext16 1338  
               __ptext17 1404                 __ptext18 13A8                 __ptext19 142E  
       __size_of_sprintf 0052            __size_of_main 007C            __size_of_dtoa 02E2  
             _LCD_CURSOR 1338                 isa$xinst 000000                 _vfprintf 11A2  
       ___aomod@dividend 0001                sprintf@ap 0097          ___aomod@divisor 0009  
            ??_vfpfcnvrt 0046          ___aomod@counter 0011                 sprintf@f 0099  
               sprintf@s 0058             LCD_DATA@data 0002             ___aodiv@sign 0012  
            ?_LCD_CURSOR 0003             ___aomod@sign 0012  
